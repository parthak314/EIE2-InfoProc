
hello_world_sw.elf:     file format elf32-littlenios2
hello_world_sw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000005d8 memsz 0x000005d8 flags r-x
    LOAD off    0x000015f8 vaddr 0x000105f8 paddr 0x000105fc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001600 vaddr 0x00010600 paddr 0x00010600 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00010020  00010020  000015fc  2**0
                  CONTENTS
  2 .text         000005a0  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  000105c0  000105c0  000015c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  000105f8  000105fc  000015f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00010600  00010600  00001600  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  0001060c  0001060c  000015fc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000001a8  00000000  00000000  00001620  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000e63  00000000  00000000  000017c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000007ad  00000000  00000000  0000262b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000095d  00000000  00000000  00002dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000020c  00000000  00000000  00003738  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000007d8  00000000  00000000  00003944  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007db  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000048f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e8  00000000  00000000  00004938  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00005899  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000589c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000589f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000058a0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000058a1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000058a5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000058a9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000058ad  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000058b6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000058bf  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000058c8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002b  00000000  00000000  000058d5  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00065688  00000000  00000000  00005900  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010020 l    d  .text	00000000 .text
000105c0 l    d  .rodata	00000000 .rodata
000105f8 l    d  .rwdata	00000000 .rwdata
00010600 l    d  .bss	00000000 .bss
0001060c l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hello_world_sw_bsp//obj/HAL/src/crt0.o
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 lib2-mul.c
000104ac g     F .text	0000002c alt_main
000105fc g       *ABS*	00000000 __flash_rwdata_start
000105f8 g     O .rwdata	00000004 jtag_uart
00010590 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010604 g     O .bss	00000004 alt_argv
000185f8 g       *ABS*	00000000 _gp
000104d8 g     F .text	00000004 usleep
000103a4 g     F .text	00000028 memcpy
000102e8 g     F .text	00000064 .hidden __udivsi3
0001060c g       *ABS*	00000000 __bss_end
00010588 g     F .text	00000004 alt_dcache_flush_all
000105fc g       *ABS*	00000000 __ram_rwdata_end
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000105f8 g       *ABS*	00000000 __ram_rodata_end
0001034c g     F .text	00000058 .hidden __umodsi3
0001060c g       *ABS*	00000000 end
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010020 g     F .text	0000003c _start
000104fc g     F .text	00000004 alt_sys_init
00010598 g     F .text	00000028 .hidden __mulsi3
000105f8 g       *ABS*	00000000 __ram_rwdata_start
000105c0 g       *ABS*	00000000 __ram_rodata_start
00010500 g     F .text	00000088 alt_busy_sleep
0001060c g       *ABS*	00000000 __alt_stack_base
00010600 g       *ABS*	00000000 __bss_start
0001005c g     F .text	00000194 main
00010600 g     O .bss	00000004 alt_envp
000101f0 g     F .text	00000084 .hidden __divsi3
000105c0 g       *ABS*	00000000 __flash_rodata_start
000104dc g     F .text	00000020 alt_irq_init
00010608 g     O .bss	00000004 alt_argc
00010020 g       *ABS*	00000000 __ram_exceptions_start
000105fc g       *ABS*	00000000 _edata
0001060c g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
00010274 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
0001058c g     F .text	00000004 alt_icache_flush_all
000103cc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a17e14 	ori	gp,gp,34296
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10818014 	ori	r2,r2,1536

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c18314 	ori	r3,r3,1548

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <__alt_data_end+0xffff0044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00103cc0 	call	103cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00104ac0 	call	104ac <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <__alt_data_end+0xffff0058>

0001005c <main>:
#include <unistd.h>

#define DELAY 20000 // 50ms

int main()
{
   1005c:	deffeb04 	addi	sp,sp,-84
    int switch_datain = 0;
    int led_pattern[14] = {
   10060:	01400074 	movhi	r5,1
#include <unistd.h>

#define DELAY 20000 // 50ms

int main()
{
   10064:	dd001215 	stw	r20,72(sp)
   10068:	dcc01115 	stw	r19,68(sp)
   1006c:	dc801015 	stw	r18,64(sp)
   10070:	dc400f15 	stw	r17,60(sp)
    int switch_datain = 0;
    int led_pattern[14] = {
   10074:	01800e04 	movi	r6,56
   10078:	29417004 	addi	r5,r5,1472
   1007c:	d809883a 	mov	r4,sp
    int circling_pattern = 0b0110110;
    int circle_index = 0;

    while (1)
    {
        switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   10080:	050000b4 	movhi	r20,2
   10084:	04c000b4 	movhi	r19,2
   10088:	048000b4 	movhi	r18,2
   1008c:	044000b4 	movhi	r17,2
#include <unistd.h>

#define DELAY 20000 // 50ms

int main()
{
   10090:	dd401315 	stw	r21,76(sp)
   10094:	dc000e15 	stw	r16,56(sp)
   10098:	dfc01415 	stw	ra,80(sp)
    };
    int pattern_index = 0;

    // Circling pattern across 6 7-segment displays
    int circling_pattern = 0b0110110;
    int circle_index = 0;
   1009c:	0021883a 	mov	r16,zero
#define DELAY 20000 // 50ms

int main()
{
    int switch_datain = 0;
    int led_pattern[14] = {
   100a0:	00103a40 	call	103a4 <memcpy>
        0b1111000000,
        0b1110000000,
        0b1100000000,
        0b1000000000
    };
    int pattern_index = 0;
   100a4:	002b883a 	mov	r21,zero
    int circling_pattern = 0b0110110;
    int circle_index = 0;

    while (1)
    {
        switch_datain = ~IORD_ALTERA_AVALON_PIO_DATA(BUTTON_BASE);
   100a8:	a5042004 	addi	r20,r20,4224
   100ac:	9cc41404 	addi	r19,r19,4176
   100b0:	94841004 	addi	r18,r18,4160
   100b4:	8c440004 	addi	r17,r17,4096
   100b8:	a0800037 	ldwio	r2,0(r20)
   100bc:	0084303a 	nor	r2,zero,r2
        switch_datain &= (0b0000000011);

        if (switch_datain & 0b01) {
   100c0:	10c0004c 	andi	r3,r2,1
   100c4:	18000d26 	beq	r3,zero,100fc <main+0xa0>
            // LED pattern functionality remains the same
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, led_pattern[pattern_index]);
   100c8:	ad45883a 	add	r2,r21,r21
   100cc:	1085883a 	add	r2,r2,r2
   100d0:	d885883a 	add	r2,sp,r2
   100d4:	10c00017 	ldw	r3,0(r2)
   100d8:	008000b4 	movhi	r2,2
   100dc:	10841804 	addi	r2,r2,4192
   100e0:	10c00035 	stwio	r3,0(r2)
            pattern_index = (pattern_index + 1) % 14;
   100e4:	a9000044 	addi	r4,r21,1
   100e8:	01400384 	movi	r5,14
   100ec:	00102740 	call	10274 <__modsi3>
   100f0:	102b883a 	mov	r21,r2
            usleep(DELAY);
   100f4:	01138804 	movi	r4,20000
   100f8:	00003006 	br	101bc <main+0x160>
   100fc:	014000b4 	movhi	r5,2
   10100:	010000b4 	movhi	r4,2
   10104:	00c000b4 	movhi	r3,2
        }
        else if (switch_datain & 0b10) {
   10108:	1080008c 	andi	r2,r2,2
   1010c:	29440404 	addi	r5,r5,4112
   10110:	21040804 	addi	r4,r4,4128
   10114:	18c40c04 	addi	r3,r3,4144
   10118:	10002a26 	beq	r2,zero,101c4 <main+0x168>
            // Circling pattern: one segment "travels" across adjacent displays
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, (circle_index == 0) ? circling_pattern : 0b1111111);
   1011c:	80000226 	beq	r16,zero,10128 <main+0xcc>
   10120:	00801fc4 	movi	r2,127
   10124:	00000106 	br	1012c <main+0xd0>
   10128:	00800d84 	movi	r2,54
   1012c:	98800035 	stwio	r2,0(r19)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, (circle_index == 1) ? circling_pattern : 0b1111111);
   10130:	00800044 	movi	r2,1
   10134:	80800226 	beq	r16,r2,10140 <main+0xe4>
   10138:	00801fc4 	movi	r2,127
   1013c:	00000106 	br	10144 <main+0xe8>
   10140:	00800d84 	movi	r2,54
   10144:	90800035 	stwio	r2,0(r18)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, (circle_index == 2) ? circling_pattern : 0b1111111);
   10148:	00800084 	movi	r2,2
   1014c:	80800226 	beq	r16,r2,10158 <main+0xfc>
   10150:	00801fc4 	movi	r2,127
   10154:	00000106 	br	1015c <main+0x100>
   10158:	00800d84 	movi	r2,54
   1015c:	88800035 	stwio	r2,0(r17)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, (circle_index == 3) ? circling_pattern : 0b1111111);
   10160:	008000c4 	movi	r2,3
   10164:	80800226 	beq	r16,r2,10170 <main+0x114>
   10168:	00801fc4 	movi	r2,127
   1016c:	00000106 	br	10174 <main+0x118>
   10170:	00800d84 	movi	r2,54
   10174:	28800035 	stwio	r2,0(r5)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, (circle_index == 4) ? circling_pattern : 0b1111111);
   10178:	00800104 	movi	r2,4
   1017c:	80800226 	beq	r16,r2,10188 <main+0x12c>
   10180:	00801fc4 	movi	r2,127
   10184:	00000106 	br	1018c <main+0x130>
   10188:	00800d84 	movi	r2,54
   1018c:	20800035 	stwio	r2,0(r4)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, (circle_index == 5) ? circling_pattern : 0b1111111);
   10190:	00800144 	movi	r2,5
   10194:	80800226 	beq	r16,r2,101a0 <main+0x144>
   10198:	00801fc4 	movi	r2,127
   1019c:	00000106 	br	101a4 <main+0x148>
   101a0:	00800d84 	movi	r2,54
   101a4:	18800035 	stwio	r2,0(r3)

            circle_index = (circle_index + 1) % 6; // Move the active segment
   101a8:	81000044 	addi	r4,r16,1
   101ac:	01400184 	movi	r5,6
   101b0:	00102740 	call	10274 <__modsi3>
   101b4:	1021883a 	mov	r16,r2
            usleep(DELAY * 3);
   101b8:	013a9814 	movui	r4,60000
   101bc:	00104d80 	call	104d8 <usleep>
   101c0:	003fbd06 	br	100b8 <__alt_data_end+0xffff00b8>
        }
        else {
            // Turn off all LEDs and 7-segment displays
            IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0b0000000000);
   101c4:	008000b4 	movhi	r2,2
   101c8:	10841804 	addi	r2,r2,4192
   101cc:	10000035 	stwio	zero,0(r2)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0b1111111);
   101d0:	00801fc4 	movi	r2,127
   101d4:	98800035 	stwio	r2,0(r19)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0b1111111);
   101d8:	90800035 	stwio	r2,0(r18)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0b1111111);
   101dc:	88800035 	stwio	r2,0(r17)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 0b1111111);
   101e0:	28800035 	stwio	r2,0(r5)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 0b1111111);
   101e4:	20800035 	stwio	r2,0(r4)
            IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0b1111111);
   101e8:	18800035 	stwio	r2,0(r3)
   101ec:	003fb206 	br	100b8 <__alt_data_end+0xffff00b8>

000101f0 <__divsi3>:
   101f0:	20001b16 	blt	r4,zero,10260 <__divsi3+0x70>
   101f4:	000f883a 	mov	r7,zero
   101f8:	28001616 	blt	r5,zero,10254 <__divsi3+0x64>
   101fc:	200d883a 	mov	r6,r4
   10200:	29001a2e 	bgeu	r5,r4,1026c <__divsi3+0x7c>
   10204:	00800804 	movi	r2,32
   10208:	00c00044 	movi	r3,1
   1020c:	00000106 	br	10214 <__divsi3+0x24>
   10210:	10000d26 	beq	r2,zero,10248 <__divsi3+0x58>
   10214:	294b883a 	add	r5,r5,r5
   10218:	10bfffc4 	addi	r2,r2,-1
   1021c:	18c7883a 	add	r3,r3,r3
   10220:	293ffb36 	bltu	r5,r4,10210 <__alt_data_end+0xffff0210>
   10224:	0005883a 	mov	r2,zero
   10228:	18000726 	beq	r3,zero,10248 <__divsi3+0x58>
   1022c:	0005883a 	mov	r2,zero
   10230:	31400236 	bltu	r6,r5,1023c <__divsi3+0x4c>
   10234:	314dc83a 	sub	r6,r6,r5
   10238:	10c4b03a 	or	r2,r2,r3
   1023c:	1806d07a 	srli	r3,r3,1
   10240:	280ad07a 	srli	r5,r5,1
   10244:	183ffa1e 	bne	r3,zero,10230 <__alt_data_end+0xffff0230>
   10248:	38000126 	beq	r7,zero,10250 <__divsi3+0x60>
   1024c:	0085c83a 	sub	r2,zero,r2
   10250:	f800283a 	ret
   10254:	014bc83a 	sub	r5,zero,r5
   10258:	39c0005c 	xori	r7,r7,1
   1025c:	003fe706 	br	101fc <__alt_data_end+0xffff01fc>
   10260:	0109c83a 	sub	r4,zero,r4
   10264:	01c00044 	movi	r7,1
   10268:	003fe306 	br	101f8 <__alt_data_end+0xffff01f8>
   1026c:	00c00044 	movi	r3,1
   10270:	003fee06 	br	1022c <__alt_data_end+0xffff022c>

00010274 <__modsi3>:
   10274:	20001716 	blt	r4,zero,102d4 <__modsi3+0x60>
   10278:	000f883a 	mov	r7,zero
   1027c:	2005883a 	mov	r2,r4
   10280:	28001216 	blt	r5,zero,102cc <__modsi3+0x58>
   10284:	2900162e 	bgeu	r5,r4,102e0 <__modsi3+0x6c>
   10288:	01800804 	movi	r6,32
   1028c:	00c00044 	movi	r3,1
   10290:	00000106 	br	10298 <__modsi3+0x24>
   10294:	30000a26 	beq	r6,zero,102c0 <__modsi3+0x4c>
   10298:	294b883a 	add	r5,r5,r5
   1029c:	31bfffc4 	addi	r6,r6,-1
   102a0:	18c7883a 	add	r3,r3,r3
   102a4:	293ffb36 	bltu	r5,r4,10294 <__alt_data_end+0xffff0294>
   102a8:	18000526 	beq	r3,zero,102c0 <__modsi3+0x4c>
   102ac:	1806d07a 	srli	r3,r3,1
   102b0:	11400136 	bltu	r2,r5,102b8 <__modsi3+0x44>
   102b4:	1145c83a 	sub	r2,r2,r5
   102b8:	280ad07a 	srli	r5,r5,1
   102bc:	183ffb1e 	bne	r3,zero,102ac <__alt_data_end+0xffff02ac>
   102c0:	38000126 	beq	r7,zero,102c8 <__modsi3+0x54>
   102c4:	0085c83a 	sub	r2,zero,r2
   102c8:	f800283a 	ret
   102cc:	014bc83a 	sub	r5,zero,r5
   102d0:	003fec06 	br	10284 <__alt_data_end+0xffff0284>
   102d4:	0109c83a 	sub	r4,zero,r4
   102d8:	01c00044 	movi	r7,1
   102dc:	003fe706 	br	1027c <__alt_data_end+0xffff027c>
   102e0:	00c00044 	movi	r3,1
   102e4:	003ff106 	br	102ac <__alt_data_end+0xffff02ac>

000102e8 <__udivsi3>:
   102e8:	200d883a 	mov	r6,r4
   102ec:	2900152e 	bgeu	r5,r4,10344 <__udivsi3+0x5c>
   102f0:	28001416 	blt	r5,zero,10344 <__udivsi3+0x5c>
   102f4:	00800804 	movi	r2,32
   102f8:	00c00044 	movi	r3,1
   102fc:	00000206 	br	10308 <__udivsi3+0x20>
   10300:	10000e26 	beq	r2,zero,1033c <__udivsi3+0x54>
   10304:	28000516 	blt	r5,zero,1031c <__udivsi3+0x34>
   10308:	294b883a 	add	r5,r5,r5
   1030c:	10bfffc4 	addi	r2,r2,-1
   10310:	18c7883a 	add	r3,r3,r3
   10314:	293ffa36 	bltu	r5,r4,10300 <__alt_data_end+0xffff0300>
   10318:	18000826 	beq	r3,zero,1033c <__udivsi3+0x54>
   1031c:	0005883a 	mov	r2,zero
   10320:	31400236 	bltu	r6,r5,1032c <__udivsi3+0x44>
   10324:	314dc83a 	sub	r6,r6,r5
   10328:	10c4b03a 	or	r2,r2,r3
   1032c:	1806d07a 	srli	r3,r3,1
   10330:	280ad07a 	srli	r5,r5,1
   10334:	183ffa1e 	bne	r3,zero,10320 <__alt_data_end+0xffff0320>
   10338:	f800283a 	ret
   1033c:	0005883a 	mov	r2,zero
   10340:	f800283a 	ret
   10344:	00c00044 	movi	r3,1
   10348:	003ff406 	br	1031c <__alt_data_end+0xffff031c>

0001034c <__umodsi3>:
   1034c:	2005883a 	mov	r2,r4
   10350:	2900122e 	bgeu	r5,r4,1039c <__umodsi3+0x50>
   10354:	28001116 	blt	r5,zero,1039c <__umodsi3+0x50>
   10358:	01800804 	movi	r6,32
   1035c:	00c00044 	movi	r3,1
   10360:	00000206 	br	1036c <__umodsi3+0x20>
   10364:	30000c26 	beq	r6,zero,10398 <__umodsi3+0x4c>
   10368:	28000516 	blt	r5,zero,10380 <__umodsi3+0x34>
   1036c:	294b883a 	add	r5,r5,r5
   10370:	31bfffc4 	addi	r6,r6,-1
   10374:	18c7883a 	add	r3,r3,r3
   10378:	293ffa36 	bltu	r5,r4,10364 <__alt_data_end+0xffff0364>
   1037c:	18000626 	beq	r3,zero,10398 <__umodsi3+0x4c>
   10380:	1806d07a 	srli	r3,r3,1
   10384:	11400136 	bltu	r2,r5,1038c <__umodsi3+0x40>
   10388:	1145c83a 	sub	r2,r2,r5
   1038c:	280ad07a 	srli	r5,r5,1
   10390:	183ffb1e 	bne	r3,zero,10380 <__alt_data_end+0xffff0380>
   10394:	f800283a 	ret
   10398:	f800283a 	ret
   1039c:	00c00044 	movi	r3,1
   103a0:	003ff706 	br	10380 <__alt_data_end+0xffff0380>

000103a4 <memcpy>:
   103a4:	2005883a 	mov	r2,r4
   103a8:	2007883a 	mov	r3,r4
   103ac:	218d883a 	add	r6,r4,r6
   103b0:	19800526 	beq	r3,r6,103c8 <memcpy+0x24>
   103b4:	29000003 	ldbu	r4,0(r5)
   103b8:	18c00044 	addi	r3,r3,1
   103bc:	29400044 	addi	r5,r5,1
   103c0:	193fffc5 	stb	r4,-1(r3)
   103c4:	003ffa06 	br	103b0 <__alt_data_end+0xffff03b0>
   103c8:	f800283a 	ret

000103cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   103cc:	deffff04 	addi	sp,sp,-4
   103d0:	01000074 	movhi	r4,1
   103d4:	01400074 	movhi	r5,1
   103d8:	dfc00015 	stw	ra,0(sp)
   103dc:	21017e04 	addi	r4,r4,1528
   103e0:	29417f04 	addi	r5,r5,1532

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   103e4:	2140061e 	bne	r4,r5,10400 <alt_load+0x34>
   103e8:	01000074 	movhi	r4,1
   103ec:	01400074 	movhi	r5,1
   103f0:	21000804 	addi	r4,r4,32
   103f4:	29400804 	addi	r5,r5,32
   103f8:	2140121e 	bne	r4,r5,10444 <alt_load+0x78>
   103fc:	00000b06 	br	1042c <alt_load+0x60>
   10400:	00c00074 	movhi	r3,1
   10404:	18c17f04 	addi	r3,r3,1532
   10408:	1907c83a 	sub	r3,r3,r4
   1040c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10410:	10fff526 	beq	r2,r3,103e8 <__alt_data_end+0xffff03e8>
    {
      *to++ = *from++;
   10414:	114f883a 	add	r7,r2,r5
   10418:	39c00017 	ldw	r7,0(r7)
   1041c:	110d883a 	add	r6,r2,r4
   10420:	10800104 	addi	r2,r2,4
   10424:	31c00015 	stw	r7,0(r6)
   10428:	003ff906 	br	10410 <__alt_data_end+0xffff0410>
   1042c:	01000074 	movhi	r4,1
   10430:	01400074 	movhi	r5,1
   10434:	21017004 	addi	r4,r4,1472
   10438:	29417004 	addi	r5,r5,1472

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1043c:	2140101e 	bne	r4,r5,10480 <alt_load+0xb4>
   10440:	00000b06 	br	10470 <alt_load+0xa4>
   10444:	00c00074 	movhi	r3,1
   10448:	18c00804 	addi	r3,r3,32
   1044c:	1907c83a 	sub	r3,r3,r4
   10450:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10454:	10fff526 	beq	r2,r3,1042c <__alt_data_end+0xffff042c>
    {
      *to++ = *from++;
   10458:	114f883a 	add	r7,r2,r5
   1045c:	39c00017 	ldw	r7,0(r7)
   10460:	110d883a 	add	r6,r2,r4
   10464:	10800104 	addi	r2,r2,4
   10468:	31c00015 	stw	r7,0(r6)
   1046c:	003ff906 	br	10454 <__alt_data_end+0xffff0454>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10470:	00105880 	call	10588 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10474:	dfc00017 	ldw	ra,0(sp)
   10478:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1047c:	001058c1 	jmpi	1058c <alt_icache_flush_all>
   10480:	00c00074 	movhi	r3,1
   10484:	18c17e04 	addi	r3,r3,1528
   10488:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1048c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10490:	18bff726 	beq	r3,r2,10470 <__alt_data_end+0xffff0470>
    {
      *to++ = *from++;
   10494:	114f883a 	add	r7,r2,r5
   10498:	39c00017 	ldw	r7,0(r7)
   1049c:	110d883a 	add	r6,r2,r4
   104a0:	10800104 	addi	r2,r2,4
   104a4:	31c00015 	stw	r7,0(r6)
   104a8:	003ff906 	br	10490 <__alt_data_end+0xffff0490>

000104ac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104ac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104b0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   104b4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   104b8:	00104dc0 	call	104dc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   104bc:	00104fc0 	call	104fc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104c0:	d1a00217 	ldw	r6,-32760(gp)
   104c4:	d1600317 	ldw	r5,-32756(gp)
   104c8:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   104cc:	dfc00017 	ldw	ra,0(sp)
   104d0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   104d4:	001005c1 	jmpi	1005c <main>

000104d8 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   104d8:	00105001 	jmpi	10500 <alt_busy_sleep>

000104dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   104dc:	deffff04 	addi	sp,sp,-4
   104e0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   104e4:	00105900 	call	10590 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   104e8:	00800044 	movi	r2,1
   104ec:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   104f0:	dfc00017 	ldw	ra,0(sp)
   104f4:	dec00104 	addi	sp,sp,4
   104f8:	f800283a 	ret

000104fc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   104fc:	f800283a 	ret

00010500 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10500:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10504:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10508:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   1050c:	dc000015 	stw	r16,0(sp)
   10510:	dfc00115 	stw	ra,4(sp)
   10514:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10518:	00102e80 	call	102e8 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   1051c:	10001026 	beq	r2,zero,10560 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10520:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10524:	013999b4 	movhi	r4,58982
   10528:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   1052c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10530:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10534:	297fffc4 	addi	r5,r5,-1
   10538:	283ffe1e 	bne	r5,zero,10534 <__alt_data_end+0xffff0534>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1053c:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10540:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   10544:	18bffb16 	blt	r3,r2,10534 <__alt_data_end+0xffff0534>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10548:	01400144 	movi	r5,5
   1054c:	8009883a 	mov	r4,r16
   10550:	00105980 	call	10598 <__mulsi3>
   10554:	10bfffc4 	addi	r2,r2,-1
   10558:	103ffe1e 	bne	r2,zero,10554 <__alt_data_end+0xffff0554>
   1055c:	00000506 	br	10574 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10560:	01400144 	movi	r5,5
   10564:	8009883a 	mov	r4,r16
   10568:	00105980 	call	10598 <__mulsi3>
   1056c:	10bfffc4 	addi	r2,r2,-1
   10570:	00bffe16 	blt	zero,r2,1056c <__alt_data_end+0xffff056c>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10574:	0005883a 	mov	r2,zero
   10578:	dfc00117 	ldw	ra,4(sp)
   1057c:	dc000017 	ldw	r16,0(sp)
   10580:	dec00204 	addi	sp,sp,8
   10584:	f800283a 	ret

00010588 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10588:	f800283a 	ret

0001058c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1058c:	f800283a 	ret

00010590 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10590:	000170fa 	wrctl	ienable,zero
   10594:	f800283a 	ret

00010598 <__mulsi3>:
   10598:	0005883a 	mov	r2,zero
   1059c:	20000726 	beq	r4,zero,105bc <__mulsi3+0x24>
   105a0:	20c0004c 	andi	r3,r4,1
   105a4:	2008d07a 	srli	r4,r4,1
   105a8:	18000126 	beq	r3,zero,105b0 <__mulsi3+0x18>
   105ac:	1145883a 	add	r2,r2,r5
   105b0:	294b883a 	add	r5,r5,r5
   105b4:	203ffa1e 	bne	r4,zero,105a0 <__alt_data_end+0xffff05a0>
   105b8:	f800283a 	ret
   105bc:	f800283a 	ret

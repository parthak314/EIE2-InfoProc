#include "system.h"
#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_timer.h"
#include "altera_avalon_pio_regs.h"
#include "sys/alt_irq.h"
#include <stdlib.h>
#include <stdio.h>
#include "alt_types.h"
#include "sys/times.h"
#include <time.h>
#include "altera_avalon_timer_regs.h"

#define OFFSET -32
#define PWM_PERIOD 16
#define TIMER_FREQ_HZ 50000000

alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);

    if (pwm < abs(level)) {

        if (level < 0) {
            led_write(led << 1);
        } else {
            led_write(led >> 1);
        }

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
        pwm = 0;
    } else {
        pwm++;
    }

}

void timer_init(void * isr) {

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

int main() {
    alt_32 x_read;
    alt_up_accelerometer_spi_dev *acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
    if (acc_dev == NULL) {
        return 1;
    }

    timer_init(sys_timer_isr);

    while (1) {
        // Read the timer start value
        unsigned int start_time = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_BASE);

        // Perform the accelerometer read and process
        alt_up_accelerometer_spi_read_x_axis(acc_dev, &x_read);
        convert_read(x_read, &level, &led);

        // Read the timer end value
        unsigned int end_time = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_BASE);

        // Calculate elapsed time in clock cycles
        unsigned int elapsed_ticks = start_time - end_time; // Adjust if needed based on timer configuration

        // Calculate sampling frequency (clock cycles -> time)
        double elapsed_time = elapsed_ticks * (1.0 / TIMER_FREQ_HZ); // Adjust TIMER_FREQ_HZ based on your timer
        double sampling_frequency = 1.0 / elapsed_time;

        printf("Sampling Frequency: %.2f Hz\n", sampling_frequency);
    }

    return 0;
}

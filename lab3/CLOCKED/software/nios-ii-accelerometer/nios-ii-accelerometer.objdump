
nios-ii-accelerometer.elf:     file format elf32-littlenios2
nios-ii-accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001088 memsz 0x00001088 flags r-x
    LOAD off    0x000020a8 vaddr 0x000110a8 paddr 0x00011234 align 2**12
         filesz 0x0000018c memsz 0x0000018c flags rw-
    LOAD off    0x000023c0 vaddr 0x000113c0 paddr 0x000113c0 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00000ed4  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  00011054  00011054  00002054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000018c  000110a8  00011234  000020a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  000113c0  000113c0  000023c0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000114e4  000114e4  00002234  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003b8  00000000  00000000  00002258  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000048d3  00000000  00000000  00002610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a89  00000000  00000000  00006ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001c7f  00000000  00000000  0000896c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000004a8  00000000  00000000  0000a5ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017db  00000000  00000000  0000aa94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000163c  00000000  00000000  0000c26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000d8ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  0000d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000efe1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000efe4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000efe7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000efe8  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000efe9  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000eff2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000effb  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0000f004  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000033  00000000  00000000  0000f016  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000445c0  00000000  00000000  0000f049  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011054 l    d  .rodata	00000000 .rodata
000110a8 l    d  .rwdata	00000000 .rwdata
000113c0 l    d  .bss	00000000 .bss
000114e4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios-ii-accelerometer_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001043c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000110a8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011188 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00010f60 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000113e0 g     O .bss	00000004 alt_instruction_exception_handler
00010e6c g     F .text	0000002c alt_main
000101bc g     F .text	00000014 led_write
000113e4 g     O .bss	00000100 alt_irq
00011234 g       *ABS*	00000000 __flash_rwdata_start
000103f0 g     F .text	0000004c printf
00010204 g     F .text	00000080 sys_timer_isr
00011218 g     O .rwdata	00000004 jtag_uart
00010fd8 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
000113cc g     O .bss	00000004 errno
000113d8 g     O .bss	00000004 alt_argv
0001920c g       *ABS*	00000000 _gp
000111b4 g     O .rwdata	00000030 alt_fd_list
00010fe0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000103b4 g     F .text	0000003c _printf_r
00010c14 g     F .text	00000064 .hidden __udivsi3
0001121c g     O .rwdata	00000004 alt_max_fd
00010cf8 g     F .text	00000094 alt_irq_register
0001120c g     O .rwdata	00000004 _global_impure_ptr
000114e4 g       *ABS*	00000000 __bss_end
000113d0 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
000111e4 g     O .rwdata	00000028 alt_dev_null
00010f5c g     F .text	00000004 alt_dcache_flush_all
00011234 g       *ABS*	00000000 __ram_rwdata_end
00010284 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
00011220 g     O .rwdata	00000008 alt_dev_list
00010e98 g     F .text	00000060 write
000110a8 g       *ABS*	00000000 __ram_rodata_end
000113c4 g     O .bss	00000001 led
00010c78 g     F .text	00000058 .hidden __umodsi3
000114e4 g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
00010f28 g     F .text	00000034 altera_avalon_jtag_uart_write
000104a8 g     F .text	0000052c ___vfprintf_internal_r
00010180 g     F .text	0000003c _start
000113c8 g     O .bss	00000004 level
00010f18 g     F .text	00000010 alt_sys_init
00010cd0 g     F .text	00000028 .hidden __mulsi3
000110a8 g       *ABS*	00000000 __ram_rwdata_start
00011054 g       *ABS*	00000000 __ram_rodata_start
000114e4 g       *ABS*	00000000 __alt_stack_base
00010338 g     F .text	00000028 timer_read
00010f68 g     F .text	0000006c alt_dev_llist_insert
000109f0 g     F .text	000000b8 __sfvwrite_small_dev
000113c0 g       *ABS*	00000000 __bss_start
00010360 g     F .text	00000054 main
000113d4 g     O .bss	00000004 alt_envp
00011230 g     O .rwdata	00000004 alt_errno
00010b1c g     F .text	00000084 .hidden __divsi3
00011054 g       *ABS*	00000000 __flash_rodata_start
00010ef8 g     F .text	00000020 alt_irq_init
00010ac4 g     F .text	00000058 _write_r
00011210 g     O .rwdata	00000004 _impure_ptr
000113dc g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000113c0 g     O .bss	00000001 pwm
00011228 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011234 g       *ABS*	00000000 _edata
000102f4 g     F .text	00000044 timer_initialise
000114e4 g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
00010ba0 g     F .text	00000074 .hidden __modsi3
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
000101d0 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00010aa8 g     F .text	0000001c strlen
00010fd4 g     F .text	00000004 alt_icache_flush_all
00011214 g     O .rwdata	00000004 alt_priority_mask
000109d4 g     F .text	0000001c __vfprintf_internal
00010d8c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	8404f904 	addi	r16,r16,5092

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a07517 	ldw	r2,-32300(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a48314 	ori	gp,gp,37388
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	1084f014 	ori	r2,r2,5056

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c53914 	ori	r3,r3,5348

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	0010d8c0 	call	10d8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	0010e6c0 	call	10e6c <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101bc:	008000b4 	movhi	r2,2
   101c0:	21003fcc 	andi	r4,r4,255
   101c4:	10841004 	addi	r2,r2,4160
   101c8:	11000035 	stwio	r4,0(r2)
   101cc:	f800283a 	ret

000101d0 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   101d0:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
   101d4:	2005d1ba 	srai	r2,r4,6
    *level = (acc_read >> 1) & 0x1f;
   101d8:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
   101dc:	10c001cc 	andi	r3,r2,7
   101e0:	00800204 	movi	r2,8
   101e4:	10cfc83a 	sub	r7,r2,r3
   101e8:	11ce983a 	sll	r7,r2,r7
   101ec:	10c5d83a 	sra	r2,r2,r3
    *level = (acc_read >> 1) & 0x1f;
   101f0:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    *led = (8 >> val) | (8 << (8 - val));
   101f4:	3884b03a 	or	r2,r7,r2
   101f8:	30800005 	stb	r2,0(r6)
    *level = (acc_read >> 1) & 0x1f;
   101fc:	29000015 	stw	r4,0(r5)
   10200:	f800283a 	ret

00010204 <sys_timer_isr>:
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   10204:	008000b4 	movhi	r2,2
   10208:	10840804 	addi	r2,r2,4128
   1020c:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   10210:	d0a06f17 	ldw	r2,-32324(gp)
   10214:	d1606d07 	ldb	r5,-32332(gp)
   10218:	1009883a 	mov	r4,r2
   1021c:	1000010e 	bge	r2,zero,10224 <sys_timer_isr+0x20>
   10220:	0089c83a 	sub	r4,zero,r2
   10224:	00c000b4 	movhi	r3,2
   10228:	18c41004 	addi	r3,r3,4160
   1022c:	2900080e 	bge	r5,r4,10250 <sys_timer_isr+0x4c>
        if (level < 0) {
   10230:	1000040e 	bge	r2,zero,10244 <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   10234:	d0a06e03 	ldbu	r2,-32328(gp)
   10238:	1085883a 	add	r2,r2,r2
   1023c:	10803fcc 	andi	r2,r2,255
   10240:	00000406 	br	10254 <sys_timer_isr+0x50>
   10244:	d0a06e03 	ldbu	r2,-32328(gp)
   10248:	1004d07a 	srli	r2,r2,1
   1024c:	00000106 	br	10254 <sys_timer_isr+0x50>
   10250:	d0a06e03 	ldbu	r2,-32328(gp)
   10254:	18800035 	stwio	r2,0(r3)
        }
    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10258:	d0a06d03 	ldbu	r2,-32332(gp)
   1025c:	01000404 	movi	r4,16
   10260:	10c03fcc 	andi	r3,r2,255
   10264:	18c0201c 	xori	r3,r3,128
   10268:	18ffe004 	addi	r3,r3,-128
   1026c:	20c0020e 	bge	r4,r3,10278 <sys_timer_isr+0x74>
        pwm = 0;
   10270:	d0206d05 	stb	zero,-32332(gp)
   10274:	f800283a 	ret
    } else {
        pwm++;
   10278:	10800044 	addi	r2,r2,1
   1027c:	d0a06d05 	stb	r2,-32332(gp)
   10280:	f800283a 	ret

00010284 <timer_init>:
    }
}

void timer_init(void *isr) {
   10284:	defffe04 	addi	sp,sp,-8
   10288:	dc000015 	stw	r16,0(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	040000b4 	movhi	r16,2
    } else {
        pwm++;
    }
}

void timer_init(void *isr) {
   10290:	dfc00115 	stw	ra,4(sp)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10294:	84040904 	addi	r16,r16,4132
   10298:	008000c4 	movi	r2,3
   1029c:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102a0:	00c000b4 	movhi	r3,2
   102a4:	0005883a 	mov	r2,zero
   102a8:	18c40804 	addi	r3,r3,4128
   102ac:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102b0:	00c000b4 	movhi	r3,2
   102b4:	18c40a04 	addi	r3,r3,4136
   102b8:	01424004 	movi	r5,2304
   102bc:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102c0:	00c000b4 	movhi	r3,2
   102c4:	18c40b04 	addi	r3,r3,4140
   102c8:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102cc:	200d883a 	mov	r6,r4
   102d0:	000b883a 	mov	r5,zero
   102d4:	01000044 	movi	r4,1
   102d8:	0010cf80 	call	10cf8 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102dc:	008001c4 	movi	r2,7
   102e0:	80800035 	stwio	r2,0(r16)
}
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	dc000017 	ldw	r16,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <timer_initialise>:

void timer_initialise() {
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER1_BASE, 0x00); // Stop timer during setup
   102f4:	008000b4 	movhi	r2,2
   102f8:	0007883a 	mov	r3,zero
   102fc:	10840104 	addi	r2,r2,4100
   10300:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER1_BASE, 0);    // Clear any pending interrupts
   10304:	010000b4 	movhi	r4,2
   10308:	21040004 	addi	r4,r4,4096
   1030c:	20c00035 	stwio	r3,0(r4)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER1_BASE, 0xFFFF); // Set max period (low)
   10310:	010000b4 	movhi	r4,2
   10314:	00ffffd4 	movui	r3,65535
   10318:	21040204 	addi	r4,r4,4104
   1031c:	20c00035 	stwio	r3,0(r4)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER1_BASE, 0xFFFF); // Set max period (high)
   10320:	010000b4 	movhi	r4,2
   10324:	21040304 	addi	r4,r4,4108
   10328:	20c00035 	stwio	r3,0(r4)
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER1_BASE, 0x07); // Start timer in free-running mode
   1032c:	00c001c4 	movi	r3,7
   10330:	10c00035 	stwio	r3,0(r2)
   10334:	f800283a 	ret

00010338 <timer_read>:
}


alt_u32 timer_read() {
    alt_u16 low = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER1_BASE);
   10338:	008000b4 	movhi	r2,2
   1033c:	10840404 	addi	r2,r2,4112
   10340:	10c00037 	ldwio	r3,0(r2)
    alt_u16 high = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER1_BASE);
   10344:	008000b4 	movhi	r2,2
   10348:	10840504 	addi	r2,r2,4116
   1034c:	11000037 	ldwio	r4,0(r2)
    return ((alt_u32)high << 16) | low;
   10350:	2008943a 	slli	r4,r4,16
   10354:	18bfffcc 	andi	r2,r3,65535
}
   10358:	2084b03a 	or	r2,r4,r2
   1035c:	f800283a 	ret

00010360 <main>:


int main() {
   10360:	defffd04 	addi	sp,sp,-12
   10364:	dc400115 	stw	r17,4(sp)
   10368:	dc000015 	stw	r16,0(sp)
//        printf("Elapsed time: %.20f seconds\n", elapsed_time);
//    }
	while (1) {
	    alt_u32 time_now = timer_read();
	    printf("Current Timer Value: %lu\n", time_now);
	    alt_u16 period_low = IORD_ALTERA_AVALON_TIMER_PERIODL(TIMER1_BASE);
   1036c:	044000b4 	movhi	r17,2
	    alt_u16 period_high = IORD_ALTERA_AVALON_TIMER_PERIODH(TIMER1_BASE);
   10370:	040000b4 	movhi	r16,2
    alt_u16 high = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER1_BASE);
    return ((alt_u32)high << 16) | low;
}


int main() {
   10374:	dfc00215 	stw	ra,8(sp)
//        printf("Elapsed time: %.20f seconds\n", elapsed_time);
//    }
	while (1) {
	    alt_u32 time_now = timer_read();
	    printf("Current Timer Value: %lu\n", time_now);
	    alt_u16 period_low = IORD_ALTERA_AVALON_TIMER_PERIODL(TIMER1_BASE);
   10378:	8c440204 	addi	r17,r17,4104
	    alt_u16 period_high = IORD_ALTERA_AVALON_TIMER_PERIODH(TIMER1_BASE);
   1037c:	84040304 	addi	r16,r16,4108
//
//        printf("Start: %.20f\nEnd: %.20f\n", start_time, end_time);
//        printf("Elapsed time: %.20f seconds\n", elapsed_time);
//    }
	while (1) {
	    alt_u32 time_now = timer_read();
   10380:	00103380 	call	10338 <timer_read>
	    printf("Current Timer Value: %lu\n", time_now);
   10384:	01000074 	movhi	r4,1
   10388:	100b883a 	mov	r5,r2
   1038c:	21041504 	addi	r4,r4,4180
   10390:	00103f00 	call	103f0 <printf>
	    alt_u16 period_low = IORD_ALTERA_AVALON_TIMER_PERIODL(TIMER1_BASE);
   10394:	89800037 	ldwio	r6,0(r17)
	    alt_u16 period_high = IORD_ALTERA_AVALON_TIMER_PERIODH(TIMER1_BASE);
   10398:	81400037 	ldwio	r5,0(r16)
	    printf("Timer Period: %u%u\n", period_high, period_low);
   1039c:	01000074 	movhi	r4,1
   103a0:	31bfffcc 	andi	r6,r6,65535
   103a4:	297fffcc 	andi	r5,r5,65535
   103a8:	21041c04 	addi	r4,r4,4208
   103ac:	00103f00 	call	103f0 <printf>
   103b0:	003ff306 	br	10380 <__alt_data_end+0xffff0380>

000103b4 <_printf_r>:
   103b4:	defffd04 	addi	sp,sp,-12
   103b8:	dfc00015 	stw	ra,0(sp)
   103bc:	d9800115 	stw	r6,4(sp)
   103c0:	d9c00215 	stw	r7,8(sp)
   103c4:	20c00217 	ldw	r3,8(r4)
   103c8:	01800074 	movhi	r6,1
   103cc:	31827c04 	addi	r6,r6,2544
   103d0:	19800115 	stw	r6,4(r3)
   103d4:	280d883a 	mov	r6,r5
   103d8:	21400217 	ldw	r5,8(r4)
   103dc:	d9c00104 	addi	r7,sp,4
   103e0:	00104a80 	call	104a8 <___vfprintf_internal_r>
   103e4:	dfc00017 	ldw	ra,0(sp)
   103e8:	dec00304 	addi	sp,sp,12
   103ec:	f800283a 	ret

000103f0 <printf>:
   103f0:	defffc04 	addi	sp,sp,-16
   103f4:	dfc00015 	stw	ra,0(sp)
   103f8:	d9400115 	stw	r5,4(sp)
   103fc:	d9800215 	stw	r6,8(sp)
   10400:	d9c00315 	stw	r7,12(sp)
   10404:	00800074 	movhi	r2,1
   10408:	10848404 	addi	r2,r2,4624
   1040c:	10800017 	ldw	r2,0(r2)
   10410:	01400074 	movhi	r5,1
   10414:	29427c04 	addi	r5,r5,2544
   10418:	10c00217 	ldw	r3,8(r2)
   1041c:	d9800104 	addi	r6,sp,4
   10420:	19400115 	stw	r5,4(r3)
   10424:	200b883a 	mov	r5,r4
   10428:	11000217 	ldw	r4,8(r2)
   1042c:	00109d40 	call	109d4 <__vfprintf_internal>
   10430:	dfc00017 	ldw	ra,0(sp)
   10434:	dec00404 	addi	sp,sp,16
   10438:	f800283a 	ret

0001043c <print_repeat>:
   1043c:	defffb04 	addi	sp,sp,-20
   10440:	dc800315 	stw	r18,12(sp)
   10444:	dc400215 	stw	r17,8(sp)
   10448:	dc000115 	stw	r16,4(sp)
   1044c:	dfc00415 	stw	ra,16(sp)
   10450:	2025883a 	mov	r18,r4
   10454:	2823883a 	mov	r17,r5
   10458:	d9800005 	stb	r6,0(sp)
   1045c:	3821883a 	mov	r16,r7
   10460:	04000a0e 	bge	zero,r16,1048c <print_repeat+0x50>
   10464:	88800117 	ldw	r2,4(r17)
   10468:	01c00044 	movi	r7,1
   1046c:	d80d883a 	mov	r6,sp
   10470:	880b883a 	mov	r5,r17
   10474:	9009883a 	mov	r4,r18
   10478:	103ee83a 	callr	r2
   1047c:	843fffc4 	addi	r16,r16,-1
   10480:	103ff726 	beq	r2,zero,10460 <__alt_data_end+0xffff0460>
   10484:	00bfffc4 	movi	r2,-1
   10488:	00000106 	br	10490 <print_repeat+0x54>
   1048c:	0005883a 	mov	r2,zero
   10490:	dfc00417 	ldw	ra,16(sp)
   10494:	dc800317 	ldw	r18,12(sp)
   10498:	dc400217 	ldw	r17,8(sp)
   1049c:	dc000117 	ldw	r16,4(sp)
   104a0:	dec00504 	addi	sp,sp,20
   104a4:	f800283a 	ret

000104a8 <___vfprintf_internal_r>:
   104a8:	deffe504 	addi	sp,sp,-108
   104ac:	d8c00804 	addi	r3,sp,32
   104b0:	ddc01815 	stw	r23,96(sp)
   104b4:	dd801715 	stw	r22,92(sp)
   104b8:	dd401615 	stw	r21,88(sp)
   104bc:	dd001515 	stw	r20,84(sp)
   104c0:	dcc01415 	stw	r19,80(sp)
   104c4:	dc801315 	stw	r18,76(sp)
   104c8:	dc401215 	stw	r17,72(sp)
   104cc:	dc001115 	stw	r16,68(sp)
   104d0:	dfc01a15 	stw	ra,104(sp)
   104d4:	df001915 	stw	fp,100(sp)
   104d8:	2029883a 	mov	r20,r4
   104dc:	2823883a 	mov	r17,r5
   104e0:	382d883a 	mov	r22,r7
   104e4:	d9800f15 	stw	r6,60(sp)
   104e8:	0021883a 	mov	r16,zero
   104ec:	d8000e15 	stw	zero,56(sp)
   104f0:	d8000a15 	stw	zero,40(sp)
   104f4:	002b883a 	mov	r21,zero
   104f8:	0027883a 	mov	r19,zero
   104fc:	0025883a 	mov	r18,zero
   10500:	d8000c15 	stw	zero,48(sp)
   10504:	d8000b15 	stw	zero,44(sp)
   10508:	002f883a 	mov	r23,zero
   1050c:	d8c00915 	stw	r3,36(sp)
   10510:	d8c00f17 	ldw	r3,60(sp)
   10514:	19000003 	ldbu	r4,0(r3)
   10518:	20803fcc 	andi	r2,r4,255
   1051c:	1080201c 	xori	r2,r2,128
   10520:	10bfe004 	addi	r2,r2,-128
   10524:	10011e26 	beq	r2,zero,109a0 <___vfprintf_internal_r+0x4f8>
   10528:	00c00044 	movi	r3,1
   1052c:	b8c01426 	beq	r23,r3,10580 <___vfprintf_internal_r+0xd8>
   10530:	1dc00216 	blt	r3,r23,1053c <___vfprintf_internal_r+0x94>
   10534:	b8000626 	beq	r23,zero,10550 <___vfprintf_internal_r+0xa8>
   10538:	00011506 	br	10990 <___vfprintf_internal_r+0x4e8>
   1053c:	01400084 	movi	r5,2
   10540:	b9401d26 	beq	r23,r5,105b8 <___vfprintf_internal_r+0x110>
   10544:	014000c4 	movi	r5,3
   10548:	b9402b26 	beq	r23,r5,105f8 <___vfprintf_internal_r+0x150>
   1054c:	00011006 	br	10990 <___vfprintf_internal_r+0x4e8>
   10550:	01400944 	movi	r5,37
   10554:	1140fc26 	beq	r2,r5,10948 <___vfprintf_internal_r+0x4a0>
   10558:	88800117 	ldw	r2,4(r17)
   1055c:	d9000005 	stb	r4,0(sp)
   10560:	01c00044 	movi	r7,1
   10564:	d80d883a 	mov	r6,sp
   10568:	880b883a 	mov	r5,r17
   1056c:	a009883a 	mov	r4,r20
   10570:	103ee83a 	callr	r2
   10574:	1000d81e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   10578:	84000044 	addi	r16,r16,1
   1057c:	00010406 	br	10990 <___vfprintf_internal_r+0x4e8>
   10580:	01400c04 	movi	r5,48
   10584:	1140fa26 	beq	r2,r5,10970 <___vfprintf_internal_r+0x4c8>
   10588:	01400944 	movi	r5,37
   1058c:	11400a1e 	bne	r2,r5,105b8 <___vfprintf_internal_r+0x110>
   10590:	d8800005 	stb	r2,0(sp)
   10594:	88800117 	ldw	r2,4(r17)
   10598:	b80f883a 	mov	r7,r23
   1059c:	d80d883a 	mov	r6,sp
   105a0:	880b883a 	mov	r5,r17
   105a4:	a009883a 	mov	r4,r20
   105a8:	103ee83a 	callr	r2
   105ac:	1000ca1e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   105b0:	84000044 	addi	r16,r16,1
   105b4:	0000f506 	br	1098c <___vfprintf_internal_r+0x4e4>
   105b8:	25fff404 	addi	r23,r4,-48
   105bc:	bdc03fcc 	andi	r23,r23,255
   105c0:	00c00244 	movi	r3,9
   105c4:	1dc00936 	bltu	r3,r23,105ec <___vfprintf_internal_r+0x144>
   105c8:	00bfffc4 	movi	r2,-1
   105cc:	90800426 	beq	r18,r2,105e0 <___vfprintf_internal_r+0x138>
   105d0:	01400284 	movi	r5,10
   105d4:	9009883a 	mov	r4,r18
   105d8:	0010cd00 	call	10cd0 <__mulsi3>
   105dc:	00000106 	br	105e4 <___vfprintf_internal_r+0x13c>
   105e0:	0005883a 	mov	r2,zero
   105e4:	b8a5883a 	add	r18,r23,r2
   105e8:	0000e206 	br	10974 <___vfprintf_internal_r+0x4cc>
   105ec:	01400b84 	movi	r5,46
   105f0:	1140e426 	beq	r2,r5,10984 <___vfprintf_internal_r+0x4dc>
   105f4:	05c00084 	movi	r23,2
   105f8:	213ff404 	addi	r4,r4,-48
   105fc:	27003fcc 	andi	fp,r4,255
   10600:	00c00244 	movi	r3,9
   10604:	1f000936 	bltu	r3,fp,1062c <___vfprintf_internal_r+0x184>
   10608:	00bfffc4 	movi	r2,-1
   1060c:	98800426 	beq	r19,r2,10620 <___vfprintf_internal_r+0x178>
   10610:	01400284 	movi	r5,10
   10614:	9809883a 	mov	r4,r19
   10618:	0010cd00 	call	10cd0 <__mulsi3>
   1061c:	00000106 	br	10624 <___vfprintf_internal_r+0x17c>
   10620:	0005883a 	mov	r2,zero
   10624:	e0a7883a 	add	r19,fp,r2
   10628:	0000d906 	br	10990 <___vfprintf_internal_r+0x4e8>
   1062c:	00c01b04 	movi	r3,108
   10630:	10c0d226 	beq	r2,r3,1097c <___vfprintf_internal_r+0x4d4>
   10634:	013fffc4 	movi	r4,-1
   10638:	99000226 	beq	r19,r4,10644 <___vfprintf_internal_r+0x19c>
   1063c:	d8000b15 	stw	zero,44(sp)
   10640:	00000106 	br	10648 <___vfprintf_internal_r+0x1a0>
   10644:	04c00044 	movi	r19,1
   10648:	01001a44 	movi	r4,105
   1064c:	11001626 	beq	r2,r4,106a8 <___vfprintf_internal_r+0x200>
   10650:	20800916 	blt	r4,r2,10678 <___vfprintf_internal_r+0x1d0>
   10654:	010018c4 	movi	r4,99
   10658:	11008826 	beq	r2,r4,1087c <___vfprintf_internal_r+0x3d4>
   1065c:	01001904 	movi	r4,100
   10660:	11001126 	beq	r2,r4,106a8 <___vfprintf_internal_r+0x200>
   10664:	01001604 	movi	r4,88
   10668:	1100c81e 	bne	r2,r4,1098c <___vfprintf_internal_r+0x4e4>
   1066c:	00c00044 	movi	r3,1
   10670:	d8c00e15 	stw	r3,56(sp)
   10674:	00001506 	br	106cc <___vfprintf_internal_r+0x224>
   10678:	01001cc4 	movi	r4,115
   1067c:	11009826 	beq	r2,r4,108e0 <___vfprintf_internal_r+0x438>
   10680:	20800416 	blt	r4,r2,10694 <___vfprintf_internal_r+0x1ec>
   10684:	01001bc4 	movi	r4,111
   10688:	1100c01e 	bne	r2,r4,1098c <___vfprintf_internal_r+0x4e4>
   1068c:	05400204 	movi	r21,8
   10690:	00000f06 	br	106d0 <___vfprintf_internal_r+0x228>
   10694:	01001d44 	movi	r4,117
   10698:	11000d26 	beq	r2,r4,106d0 <___vfprintf_internal_r+0x228>
   1069c:	01001e04 	movi	r4,120
   106a0:	11000a26 	beq	r2,r4,106cc <___vfprintf_internal_r+0x224>
   106a4:	0000b906 	br	1098c <___vfprintf_internal_r+0x4e4>
   106a8:	d8c00a17 	ldw	r3,40(sp)
   106ac:	b7000104 	addi	fp,r22,4
   106b0:	18000726 	beq	r3,zero,106d0 <___vfprintf_internal_r+0x228>
   106b4:	df000d15 	stw	fp,52(sp)
   106b8:	b5c00017 	ldw	r23,0(r22)
   106bc:	b800080e 	bge	r23,zero,106e0 <___vfprintf_internal_r+0x238>
   106c0:	05efc83a 	sub	r23,zero,r23
   106c4:	02400044 	movi	r9,1
   106c8:	00000606 	br	106e4 <___vfprintf_internal_r+0x23c>
   106cc:	05400404 	movi	r21,16
   106d0:	b0c00104 	addi	r3,r22,4
   106d4:	d8c00d15 	stw	r3,52(sp)
   106d8:	b5c00017 	ldw	r23,0(r22)
   106dc:	d8000a15 	stw	zero,40(sp)
   106e0:	0013883a 	mov	r9,zero
   106e4:	d839883a 	mov	fp,sp
   106e8:	b8001726 	beq	r23,zero,10748 <___vfprintf_internal_r+0x2a0>
   106ec:	a80b883a 	mov	r5,r21
   106f0:	b809883a 	mov	r4,r23
   106f4:	da401015 	stw	r9,64(sp)
   106f8:	0010c140 	call	10c14 <__udivsi3>
   106fc:	a80b883a 	mov	r5,r21
   10700:	1009883a 	mov	r4,r2
   10704:	102d883a 	mov	r22,r2
   10708:	0010cd00 	call	10cd0 <__mulsi3>
   1070c:	b885c83a 	sub	r2,r23,r2
   10710:	00c00244 	movi	r3,9
   10714:	da401017 	ldw	r9,64(sp)
   10718:	18800216 	blt	r3,r2,10724 <___vfprintf_internal_r+0x27c>
   1071c:	10800c04 	addi	r2,r2,48
   10720:	00000506 	br	10738 <___vfprintf_internal_r+0x290>
   10724:	d8c00e17 	ldw	r3,56(sp)
   10728:	18000226 	beq	r3,zero,10734 <___vfprintf_internal_r+0x28c>
   1072c:	10800dc4 	addi	r2,r2,55
   10730:	00000106 	br	10738 <___vfprintf_internal_r+0x290>
   10734:	108015c4 	addi	r2,r2,87
   10738:	e0800005 	stb	r2,0(fp)
   1073c:	b02f883a 	mov	r23,r22
   10740:	e7000044 	addi	fp,fp,1
   10744:	003fe806 	br	106e8 <__alt_data_end+0xffff06e8>
   10748:	e6efc83a 	sub	r23,fp,sp
   1074c:	9dc5c83a 	sub	r2,r19,r23
   10750:	0080090e 	bge	zero,r2,10778 <___vfprintf_internal_r+0x2d0>
   10754:	e085883a 	add	r2,fp,r2
   10758:	01400c04 	movi	r5,48
   1075c:	d8c00917 	ldw	r3,36(sp)
   10760:	e009883a 	mov	r4,fp
   10764:	e0c0032e 	bgeu	fp,r3,10774 <___vfprintf_internal_r+0x2cc>
   10768:	e7000044 	addi	fp,fp,1
   1076c:	21400005 	stb	r5,0(r4)
   10770:	e0bffa1e 	bne	fp,r2,1075c <__alt_data_end+0xffff075c>
   10774:	e6efc83a 	sub	r23,fp,sp
   10778:	d8c00b17 	ldw	r3,44(sp)
   1077c:	4dd1883a 	add	r8,r9,r23
   10780:	922dc83a 	sub	r22,r18,r8
   10784:	18001626 	beq	r3,zero,107e0 <___vfprintf_internal_r+0x338>
   10788:	48000a26 	beq	r9,zero,107b4 <___vfprintf_internal_r+0x30c>
   1078c:	00800b44 	movi	r2,45
   10790:	d8800805 	stb	r2,32(sp)
   10794:	88800117 	ldw	r2,4(r17)
   10798:	01c00044 	movi	r7,1
   1079c:	d9800804 	addi	r6,sp,32
   107a0:	880b883a 	mov	r5,r17
   107a4:	a009883a 	mov	r4,r20
   107a8:	103ee83a 	callr	r2
   107ac:	10004a1e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   107b0:	84000044 	addi	r16,r16,1
   107b4:	0580070e 	bge	zero,r22,107d4 <___vfprintf_internal_r+0x32c>
   107b8:	b00f883a 	mov	r7,r22
   107bc:	01800c04 	movi	r6,48
   107c0:	880b883a 	mov	r5,r17
   107c4:	a009883a 	mov	r4,r20
   107c8:	001043c0 	call	1043c <print_repeat>
   107cc:	1000421e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   107d0:	85a1883a 	add	r16,r16,r22
   107d4:	e02d883a 	mov	r22,fp
   107d8:	bf2fc83a 	sub	r23,r23,fp
   107dc:	00002006 	br	10860 <___vfprintf_internal_r+0x3b8>
   107e0:	0580090e 	bge	zero,r22,10808 <___vfprintf_internal_r+0x360>
   107e4:	b00f883a 	mov	r7,r22
   107e8:	01800804 	movi	r6,32
   107ec:	880b883a 	mov	r5,r17
   107f0:	a009883a 	mov	r4,r20
   107f4:	da401015 	stw	r9,64(sp)
   107f8:	001043c0 	call	1043c <print_repeat>
   107fc:	da401017 	ldw	r9,64(sp)
   10800:	1000351e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   10804:	85a1883a 	add	r16,r16,r22
   10808:	483ff226 	beq	r9,zero,107d4 <__alt_data_end+0xffff07d4>
   1080c:	00800b44 	movi	r2,45
   10810:	d8800805 	stb	r2,32(sp)
   10814:	88800117 	ldw	r2,4(r17)
   10818:	01c00044 	movi	r7,1
   1081c:	d9800804 	addi	r6,sp,32
   10820:	880b883a 	mov	r5,r17
   10824:	a009883a 	mov	r4,r20
   10828:	103ee83a 	callr	r2
   1082c:	10002a1e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   10830:	84000044 	addi	r16,r16,1
   10834:	003fe706 	br	107d4 <__alt_data_end+0xffff07d4>
   10838:	b5bfffc4 	addi	r22,r22,-1
   1083c:	b0800003 	ldbu	r2,0(r22)
   10840:	01c00044 	movi	r7,1
   10844:	d9800804 	addi	r6,sp,32
   10848:	d8800805 	stb	r2,32(sp)
   1084c:	88800117 	ldw	r2,4(r17)
   10850:	880b883a 	mov	r5,r17
   10854:	a009883a 	mov	r4,r20
   10858:	103ee83a 	callr	r2
   1085c:	10001e1e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   10860:	8585c83a 	sub	r2,r16,r22
   10864:	b5c9883a 	add	r4,r22,r23
   10868:	e085883a 	add	r2,fp,r2
   1086c:	013ff216 	blt	zero,r4,10838 <__alt_data_end+0xffff0838>
   10870:	1021883a 	mov	r16,r2
   10874:	dd800d17 	ldw	r22,52(sp)
   10878:	00004406 	br	1098c <___vfprintf_internal_r+0x4e4>
   1087c:	00800044 	movi	r2,1
   10880:	1480080e 	bge	r2,r18,108a4 <___vfprintf_internal_r+0x3fc>
   10884:	95ffffc4 	addi	r23,r18,-1
   10888:	b80f883a 	mov	r7,r23
   1088c:	01800804 	movi	r6,32
   10890:	880b883a 	mov	r5,r17
   10894:	a009883a 	mov	r4,r20
   10898:	001043c0 	call	1043c <print_repeat>
   1089c:	10000e1e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   108a0:	85e1883a 	add	r16,r16,r23
   108a4:	b0800017 	ldw	r2,0(r22)
   108a8:	01c00044 	movi	r7,1
   108ac:	d80d883a 	mov	r6,sp
   108b0:	d8800005 	stb	r2,0(sp)
   108b4:	88800117 	ldw	r2,4(r17)
   108b8:	880b883a 	mov	r5,r17
   108bc:	a009883a 	mov	r4,r20
   108c0:	b5c00104 	addi	r23,r22,4
   108c4:	103ee83a 	callr	r2
   108c8:	1000031e 	bne	r2,zero,108d8 <___vfprintf_internal_r+0x430>
   108cc:	84000044 	addi	r16,r16,1
   108d0:	b82d883a 	mov	r22,r23
   108d4:	00002d06 	br	1098c <___vfprintf_internal_r+0x4e4>
   108d8:	00bfffc4 	movi	r2,-1
   108dc:	00003106 	br	109a4 <___vfprintf_internal_r+0x4fc>
   108e0:	b5c00017 	ldw	r23,0(r22)
   108e4:	b7000104 	addi	fp,r22,4
   108e8:	b809883a 	mov	r4,r23
   108ec:	0010aa80 	call	10aa8 <strlen>
   108f0:	9091c83a 	sub	r8,r18,r2
   108f4:	102d883a 	mov	r22,r2
   108f8:	0200090e 	bge	zero,r8,10920 <___vfprintf_internal_r+0x478>
   108fc:	400f883a 	mov	r7,r8
   10900:	01800804 	movi	r6,32
   10904:	880b883a 	mov	r5,r17
   10908:	a009883a 	mov	r4,r20
   1090c:	da001015 	stw	r8,64(sp)
   10910:	001043c0 	call	1043c <print_repeat>
   10914:	da001017 	ldw	r8,64(sp)
   10918:	103fef1e 	bne	r2,zero,108d8 <__alt_data_end+0xffff08d8>
   1091c:	8221883a 	add	r16,r16,r8
   10920:	88800117 	ldw	r2,4(r17)
   10924:	b00f883a 	mov	r7,r22
   10928:	b80d883a 	mov	r6,r23
   1092c:	880b883a 	mov	r5,r17
   10930:	a009883a 	mov	r4,r20
   10934:	103ee83a 	callr	r2
   10938:	103fe71e 	bne	r2,zero,108d8 <__alt_data_end+0xffff08d8>
   1093c:	85a1883a 	add	r16,r16,r22
   10940:	e02d883a 	mov	r22,fp
   10944:	00001106 	br	1098c <___vfprintf_internal_r+0x4e4>
   10948:	00c00044 	movi	r3,1
   1094c:	04ffffc4 	movi	r19,-1
   10950:	d8000e15 	stw	zero,56(sp)
   10954:	d8c00a15 	stw	r3,40(sp)
   10958:	05400284 	movi	r21,10
   1095c:	9825883a 	mov	r18,r19
   10960:	d8000c15 	stw	zero,48(sp)
   10964:	d8000b15 	stw	zero,44(sp)
   10968:	182f883a 	mov	r23,r3
   1096c:	00000806 	br	10990 <___vfprintf_internal_r+0x4e8>
   10970:	ddc00b15 	stw	r23,44(sp)
   10974:	05c00084 	movi	r23,2
   10978:	00000506 	br	10990 <___vfprintf_internal_r+0x4e8>
   1097c:	00c00044 	movi	r3,1
   10980:	d8c00c15 	stw	r3,48(sp)
   10984:	05c000c4 	movi	r23,3
   10988:	00000106 	br	10990 <___vfprintf_internal_r+0x4e8>
   1098c:	002f883a 	mov	r23,zero
   10990:	d8c00f17 	ldw	r3,60(sp)
   10994:	18c00044 	addi	r3,r3,1
   10998:	d8c00f15 	stw	r3,60(sp)
   1099c:	003edc06 	br	10510 <__alt_data_end+0xffff0510>
   109a0:	8005883a 	mov	r2,r16
   109a4:	dfc01a17 	ldw	ra,104(sp)
   109a8:	df001917 	ldw	fp,100(sp)
   109ac:	ddc01817 	ldw	r23,96(sp)
   109b0:	dd801717 	ldw	r22,92(sp)
   109b4:	dd401617 	ldw	r21,88(sp)
   109b8:	dd001517 	ldw	r20,84(sp)
   109bc:	dcc01417 	ldw	r19,80(sp)
   109c0:	dc801317 	ldw	r18,76(sp)
   109c4:	dc401217 	ldw	r17,72(sp)
   109c8:	dc001117 	ldw	r16,68(sp)
   109cc:	dec01b04 	addi	sp,sp,108
   109d0:	f800283a 	ret

000109d4 <__vfprintf_internal>:
   109d4:	00800074 	movhi	r2,1
   109d8:	10848404 	addi	r2,r2,4624
   109dc:	300f883a 	mov	r7,r6
   109e0:	280d883a 	mov	r6,r5
   109e4:	200b883a 	mov	r5,r4
   109e8:	11000017 	ldw	r4,0(r2)
   109ec:	00104a81 	jmpi	104a8 <___vfprintf_internal_r>

000109f0 <__sfvwrite_small_dev>:
   109f0:	2880000b 	ldhu	r2,0(r5)
   109f4:	1080020c 	andi	r2,r2,8
   109f8:	10002126 	beq	r2,zero,10a80 <__sfvwrite_small_dev+0x90>
   109fc:	2880008f 	ldh	r2,2(r5)
   10a00:	defffa04 	addi	sp,sp,-24
   10a04:	dc000015 	stw	r16,0(sp)
   10a08:	dfc00515 	stw	ra,20(sp)
   10a0c:	dd000415 	stw	r20,16(sp)
   10a10:	dcc00315 	stw	r19,12(sp)
   10a14:	dc800215 	stw	r18,8(sp)
   10a18:	dc400115 	stw	r17,4(sp)
   10a1c:	2821883a 	mov	r16,r5
   10a20:	10001216 	blt	r2,zero,10a6c <__sfvwrite_small_dev+0x7c>
   10a24:	2027883a 	mov	r19,r4
   10a28:	3025883a 	mov	r18,r6
   10a2c:	3823883a 	mov	r17,r7
   10a30:	05010004 	movi	r20,1024
   10a34:	04400b0e 	bge	zero,r17,10a64 <__sfvwrite_small_dev+0x74>
   10a38:	880f883a 	mov	r7,r17
   10a3c:	a440010e 	bge	r20,r17,10a44 <__sfvwrite_small_dev+0x54>
   10a40:	01c10004 	movi	r7,1024
   10a44:	8140008f 	ldh	r5,2(r16)
   10a48:	900d883a 	mov	r6,r18
   10a4c:	9809883a 	mov	r4,r19
   10a50:	0010ac40 	call	10ac4 <_write_r>
   10a54:	0080050e 	bge	zero,r2,10a6c <__sfvwrite_small_dev+0x7c>
   10a58:	88a3c83a 	sub	r17,r17,r2
   10a5c:	90a5883a 	add	r18,r18,r2
   10a60:	003ff406 	br	10a34 <__alt_data_end+0xffff0a34>
   10a64:	0005883a 	mov	r2,zero
   10a68:	00000706 	br	10a88 <__sfvwrite_small_dev+0x98>
   10a6c:	8080000b 	ldhu	r2,0(r16)
   10a70:	10801014 	ori	r2,r2,64
   10a74:	8080000d 	sth	r2,0(r16)
   10a78:	00bfffc4 	movi	r2,-1
   10a7c:	00000206 	br	10a88 <__sfvwrite_small_dev+0x98>
   10a80:	00bfffc4 	movi	r2,-1
   10a84:	f800283a 	ret
   10a88:	dfc00517 	ldw	ra,20(sp)
   10a8c:	dd000417 	ldw	r20,16(sp)
   10a90:	dcc00317 	ldw	r19,12(sp)
   10a94:	dc800217 	ldw	r18,8(sp)
   10a98:	dc400117 	ldw	r17,4(sp)
   10a9c:	dc000017 	ldw	r16,0(sp)
   10aa0:	dec00604 	addi	sp,sp,24
   10aa4:	f800283a 	ret

00010aa8 <strlen>:
   10aa8:	2005883a 	mov	r2,r4
   10aac:	10c00007 	ldb	r3,0(r2)
   10ab0:	18000226 	beq	r3,zero,10abc <strlen+0x14>
   10ab4:	10800044 	addi	r2,r2,1
   10ab8:	003ffc06 	br	10aac <__alt_data_end+0xffff0aac>
   10abc:	1105c83a 	sub	r2,r2,r4
   10ac0:	f800283a 	ret

00010ac4 <_write_r>:
   10ac4:	defffd04 	addi	sp,sp,-12
   10ac8:	dc000015 	stw	r16,0(sp)
   10acc:	04000074 	movhi	r16,1
   10ad0:	dc400115 	stw	r17,4(sp)
   10ad4:	8404f304 	addi	r16,r16,5068
   10ad8:	2023883a 	mov	r17,r4
   10adc:	2809883a 	mov	r4,r5
   10ae0:	300b883a 	mov	r5,r6
   10ae4:	380d883a 	mov	r6,r7
   10ae8:	dfc00215 	stw	ra,8(sp)
   10aec:	80000015 	stw	zero,0(r16)
   10af0:	0010e980 	call	10e98 <write>
   10af4:	00ffffc4 	movi	r3,-1
   10af8:	10c0031e 	bne	r2,r3,10b08 <_write_r+0x44>
   10afc:	80c00017 	ldw	r3,0(r16)
   10b00:	18000126 	beq	r3,zero,10b08 <_write_r+0x44>
   10b04:	88c00015 	stw	r3,0(r17)
   10b08:	dfc00217 	ldw	ra,8(sp)
   10b0c:	dc400117 	ldw	r17,4(sp)
   10b10:	dc000017 	ldw	r16,0(sp)
   10b14:	dec00304 	addi	sp,sp,12
   10b18:	f800283a 	ret

00010b1c <__divsi3>:
   10b1c:	20001b16 	blt	r4,zero,10b8c <__divsi3+0x70>
   10b20:	000f883a 	mov	r7,zero
   10b24:	28001616 	blt	r5,zero,10b80 <__divsi3+0x64>
   10b28:	200d883a 	mov	r6,r4
   10b2c:	29001a2e 	bgeu	r5,r4,10b98 <__divsi3+0x7c>
   10b30:	00800804 	movi	r2,32
   10b34:	00c00044 	movi	r3,1
   10b38:	00000106 	br	10b40 <__divsi3+0x24>
   10b3c:	10000d26 	beq	r2,zero,10b74 <__divsi3+0x58>
   10b40:	294b883a 	add	r5,r5,r5
   10b44:	10bfffc4 	addi	r2,r2,-1
   10b48:	18c7883a 	add	r3,r3,r3
   10b4c:	293ffb36 	bltu	r5,r4,10b3c <__alt_data_end+0xffff0b3c>
   10b50:	0005883a 	mov	r2,zero
   10b54:	18000726 	beq	r3,zero,10b74 <__divsi3+0x58>
   10b58:	0005883a 	mov	r2,zero
   10b5c:	31400236 	bltu	r6,r5,10b68 <__divsi3+0x4c>
   10b60:	314dc83a 	sub	r6,r6,r5
   10b64:	10c4b03a 	or	r2,r2,r3
   10b68:	1806d07a 	srli	r3,r3,1
   10b6c:	280ad07a 	srli	r5,r5,1
   10b70:	183ffa1e 	bne	r3,zero,10b5c <__alt_data_end+0xffff0b5c>
   10b74:	38000126 	beq	r7,zero,10b7c <__divsi3+0x60>
   10b78:	0085c83a 	sub	r2,zero,r2
   10b7c:	f800283a 	ret
   10b80:	014bc83a 	sub	r5,zero,r5
   10b84:	39c0005c 	xori	r7,r7,1
   10b88:	003fe706 	br	10b28 <__alt_data_end+0xffff0b28>
   10b8c:	0109c83a 	sub	r4,zero,r4
   10b90:	01c00044 	movi	r7,1
   10b94:	003fe306 	br	10b24 <__alt_data_end+0xffff0b24>
   10b98:	00c00044 	movi	r3,1
   10b9c:	003fee06 	br	10b58 <__alt_data_end+0xffff0b58>

00010ba0 <__modsi3>:
   10ba0:	20001716 	blt	r4,zero,10c00 <__modsi3+0x60>
   10ba4:	000f883a 	mov	r7,zero
   10ba8:	2005883a 	mov	r2,r4
   10bac:	28001216 	blt	r5,zero,10bf8 <__modsi3+0x58>
   10bb0:	2900162e 	bgeu	r5,r4,10c0c <__modsi3+0x6c>
   10bb4:	01800804 	movi	r6,32
   10bb8:	00c00044 	movi	r3,1
   10bbc:	00000106 	br	10bc4 <__modsi3+0x24>
   10bc0:	30000a26 	beq	r6,zero,10bec <__modsi3+0x4c>
   10bc4:	294b883a 	add	r5,r5,r5
   10bc8:	31bfffc4 	addi	r6,r6,-1
   10bcc:	18c7883a 	add	r3,r3,r3
   10bd0:	293ffb36 	bltu	r5,r4,10bc0 <__alt_data_end+0xffff0bc0>
   10bd4:	18000526 	beq	r3,zero,10bec <__modsi3+0x4c>
   10bd8:	1806d07a 	srli	r3,r3,1
   10bdc:	11400136 	bltu	r2,r5,10be4 <__modsi3+0x44>
   10be0:	1145c83a 	sub	r2,r2,r5
   10be4:	280ad07a 	srli	r5,r5,1
   10be8:	183ffb1e 	bne	r3,zero,10bd8 <__alt_data_end+0xffff0bd8>
   10bec:	38000126 	beq	r7,zero,10bf4 <__modsi3+0x54>
   10bf0:	0085c83a 	sub	r2,zero,r2
   10bf4:	f800283a 	ret
   10bf8:	014bc83a 	sub	r5,zero,r5
   10bfc:	003fec06 	br	10bb0 <__alt_data_end+0xffff0bb0>
   10c00:	0109c83a 	sub	r4,zero,r4
   10c04:	01c00044 	movi	r7,1
   10c08:	003fe706 	br	10ba8 <__alt_data_end+0xffff0ba8>
   10c0c:	00c00044 	movi	r3,1
   10c10:	003ff106 	br	10bd8 <__alt_data_end+0xffff0bd8>

00010c14 <__udivsi3>:
   10c14:	200d883a 	mov	r6,r4
   10c18:	2900152e 	bgeu	r5,r4,10c70 <__udivsi3+0x5c>
   10c1c:	28001416 	blt	r5,zero,10c70 <__udivsi3+0x5c>
   10c20:	00800804 	movi	r2,32
   10c24:	00c00044 	movi	r3,1
   10c28:	00000206 	br	10c34 <__udivsi3+0x20>
   10c2c:	10000e26 	beq	r2,zero,10c68 <__udivsi3+0x54>
   10c30:	28000516 	blt	r5,zero,10c48 <__udivsi3+0x34>
   10c34:	294b883a 	add	r5,r5,r5
   10c38:	10bfffc4 	addi	r2,r2,-1
   10c3c:	18c7883a 	add	r3,r3,r3
   10c40:	293ffa36 	bltu	r5,r4,10c2c <__alt_data_end+0xffff0c2c>
   10c44:	18000826 	beq	r3,zero,10c68 <__udivsi3+0x54>
   10c48:	0005883a 	mov	r2,zero
   10c4c:	31400236 	bltu	r6,r5,10c58 <__udivsi3+0x44>
   10c50:	314dc83a 	sub	r6,r6,r5
   10c54:	10c4b03a 	or	r2,r2,r3
   10c58:	1806d07a 	srli	r3,r3,1
   10c5c:	280ad07a 	srli	r5,r5,1
   10c60:	183ffa1e 	bne	r3,zero,10c4c <__alt_data_end+0xffff0c4c>
   10c64:	f800283a 	ret
   10c68:	0005883a 	mov	r2,zero
   10c6c:	f800283a 	ret
   10c70:	00c00044 	movi	r3,1
   10c74:	003ff406 	br	10c48 <__alt_data_end+0xffff0c48>

00010c78 <__umodsi3>:
   10c78:	2005883a 	mov	r2,r4
   10c7c:	2900122e 	bgeu	r5,r4,10cc8 <__umodsi3+0x50>
   10c80:	28001116 	blt	r5,zero,10cc8 <__umodsi3+0x50>
   10c84:	01800804 	movi	r6,32
   10c88:	00c00044 	movi	r3,1
   10c8c:	00000206 	br	10c98 <__umodsi3+0x20>
   10c90:	30000c26 	beq	r6,zero,10cc4 <__umodsi3+0x4c>
   10c94:	28000516 	blt	r5,zero,10cac <__umodsi3+0x34>
   10c98:	294b883a 	add	r5,r5,r5
   10c9c:	31bfffc4 	addi	r6,r6,-1
   10ca0:	18c7883a 	add	r3,r3,r3
   10ca4:	293ffa36 	bltu	r5,r4,10c90 <__alt_data_end+0xffff0c90>
   10ca8:	18000626 	beq	r3,zero,10cc4 <__umodsi3+0x4c>
   10cac:	1806d07a 	srli	r3,r3,1
   10cb0:	11400136 	bltu	r2,r5,10cb8 <__umodsi3+0x40>
   10cb4:	1145c83a 	sub	r2,r2,r5
   10cb8:	280ad07a 	srli	r5,r5,1
   10cbc:	183ffb1e 	bne	r3,zero,10cac <__alt_data_end+0xffff0cac>
   10cc0:	f800283a 	ret
   10cc4:	f800283a 	ret
   10cc8:	00c00044 	movi	r3,1
   10ccc:	003ff706 	br	10cac <__alt_data_end+0xffff0cac>

00010cd0 <__mulsi3>:
   10cd0:	0005883a 	mov	r2,zero
   10cd4:	20000726 	beq	r4,zero,10cf4 <__mulsi3+0x24>
   10cd8:	20c0004c 	andi	r3,r4,1
   10cdc:	2008d07a 	srli	r4,r4,1
   10ce0:	18000126 	beq	r3,zero,10ce8 <__mulsi3+0x18>
   10ce4:	1145883a 	add	r2,r2,r5
   10ce8:	294b883a 	add	r5,r5,r5
   10cec:	203ffa1e 	bne	r4,zero,10cd8 <__alt_data_end+0xffff0cd8>
   10cf0:	f800283a 	ret
   10cf4:	f800283a 	ret

00010cf8 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   10cf8:	008007c4 	movi	r2,31
   10cfc:	11002136 	bltu	r2,r4,10d84 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d00:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d04:	00ffff84 	movi	r3,-2
   10d08:	38c4703a 	and	r2,r7,r3
   10d0c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   10d10:	200490fa 	slli	r2,r4,3
   10d14:	02000074 	movhi	r8,1
   10d18:	4204f904 	addi	r8,r8,5092
   10d1c:	4085883a 	add	r2,r8,r2
   10d20:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   10d24:	11400115 	stw	r5,4(r2)
   10d28:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   10d2c:	30000726 	beq	r6,zero,10d4c <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d30:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d34:	28c6703a 	and	r3,r5,r3
   10d38:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   10d3c:	d0e07117 	ldw	r3,-32316(gp)
   10d40:	1104983a 	sll	r2,r2,r4
   10d44:	10c4b03a 	or	r2,r2,r3
   10d48:	00000706 	br	10d68 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d4c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d50:	28c6703a 	and	r3,r5,r3
   10d54:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   10d58:	1104983a 	sll	r2,r2,r4
   10d5c:	d0e07117 	ldw	r3,-32316(gp)
   10d60:	0084303a 	nor	r2,zero,r2
   10d64:	10c4703a 	and	r2,r2,r3
   10d68:	d0a07115 	stw	r2,-32316(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   10d6c:	d0a07117 	ldw	r2,-32316(gp)
   10d70:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10d74:	2801703a 	wrctl	status,r5
   10d78:	3801703a 	wrctl	status,r7
   10d7c:	0005883a 	mov	r2,zero
   10d80:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   10d84:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   10d88:	f800283a 	ret

00010d8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10d8c:	deffff04 	addi	sp,sp,-4
   10d90:	01000074 	movhi	r4,1
   10d94:	01400074 	movhi	r5,1
   10d98:	dfc00015 	stw	ra,0(sp)
   10d9c:	21042a04 	addi	r4,r4,4264
   10da0:	29448d04 	addi	r5,r5,4660

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10da4:	2140061e 	bne	r4,r5,10dc0 <alt_load+0x34>
   10da8:	01000074 	movhi	r4,1
   10dac:	01400074 	movhi	r5,1
   10db0:	21000804 	addi	r4,r4,32
   10db4:	29400804 	addi	r5,r5,32
   10db8:	2140121e 	bne	r4,r5,10e04 <alt_load+0x78>
   10dbc:	00000b06 	br	10dec <alt_load+0x60>
   10dc0:	00c00074 	movhi	r3,1
   10dc4:	18c48d04 	addi	r3,r3,4660
   10dc8:	1907c83a 	sub	r3,r3,r4
   10dcc:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10dd0:	10fff526 	beq	r2,r3,10da8 <__alt_data_end+0xffff0da8>
    {
      *to++ = *from++;
   10dd4:	114f883a 	add	r7,r2,r5
   10dd8:	39c00017 	ldw	r7,0(r7)
   10ddc:	110d883a 	add	r6,r2,r4
   10de0:	10800104 	addi	r2,r2,4
   10de4:	31c00015 	stw	r7,0(r6)
   10de8:	003ff906 	br	10dd0 <__alt_data_end+0xffff0dd0>
   10dec:	01000074 	movhi	r4,1
   10df0:	01400074 	movhi	r5,1
   10df4:	21041504 	addi	r4,r4,4180
   10df8:	29441504 	addi	r5,r5,4180

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10dfc:	2140101e 	bne	r4,r5,10e40 <alt_load+0xb4>
   10e00:	00000b06 	br	10e30 <alt_load+0xa4>
   10e04:	00c00074 	movhi	r3,1
   10e08:	18c06004 	addi	r3,r3,384
   10e0c:	1907c83a 	sub	r3,r3,r4
   10e10:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10e14:	10fff526 	beq	r2,r3,10dec <__alt_data_end+0xffff0dec>
    {
      *to++ = *from++;
   10e18:	114f883a 	add	r7,r2,r5
   10e1c:	39c00017 	ldw	r7,0(r7)
   10e20:	110d883a 	add	r6,r2,r4
   10e24:	10800104 	addi	r2,r2,4
   10e28:	31c00015 	stw	r7,0(r6)
   10e2c:	003ff906 	br	10e14 <__alt_data_end+0xffff0e14>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10e30:	0010f5c0 	call	10f5c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   10e34:	dfc00017 	ldw	ra,0(sp)
   10e38:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10e3c:	0010fd41 	jmpi	10fd4 <alt_icache_flush_all>
   10e40:	00c00074 	movhi	r3,1
   10e44:	18c42a04 	addi	r3,r3,4264
   10e48:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   10e4c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   10e50:	18bff726 	beq	r3,r2,10e30 <__alt_data_end+0xffff0e30>
    {
      *to++ = *from++;
   10e54:	114f883a 	add	r7,r2,r5
   10e58:	39c00017 	ldw	r7,0(r7)
   10e5c:	110d883a 	add	r6,r2,r4
   10e60:	10800104 	addi	r2,r2,4
   10e64:	31c00015 	stw	r7,0(r6)
   10e68:	003ff906 	br	10e50 <__alt_data_end+0xffff0e50>

00010e6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10e6c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10e70:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10e74:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10e78:	0010ef80 	call	10ef8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10e7c:	0010f180 	call	10f18 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10e80:	d1a07217 	ldw	r6,-32312(gp)
   10e84:	d1607317 	ldw	r5,-32308(gp)
   10e88:	d1207417 	ldw	r4,-32304(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10e8c:	dfc00017 	ldw	ra,0(sp)
   10e90:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10e94:	00103601 	jmpi	10360 <main>

00010e98 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
   10e98:	00800044 	movi	r2,1
   10e9c:	20800226 	beq	r4,r2,10ea8 <write+0x10>
   10ea0:	00800084 	movi	r2,2
   10ea4:	2080041e 	bne	r4,r2,10eb8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
   10ea8:	01000074 	movhi	r4,1
   10eac:	000f883a 	mov	r7,zero
   10eb0:	21048604 	addi	r4,r4,4632
   10eb4:	0010f281 	jmpi	10f28 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   10eb8:	d0a00917 	ldw	r2,-32732(gp)
   10ebc:	10000926 	beq	r2,zero,10ee4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10ec0:	deffff04 	addi	sp,sp,-4
   10ec4:	dfc00015 	stw	ra,0(sp)
   10ec8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10ecc:	00c01444 	movi	r3,81
   10ed0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10ed4:	00bfffc4 	movi	r2,-1
   10ed8:	dfc00017 	ldw	ra,0(sp)
   10edc:	dec00104 	addi	sp,sp,4
   10ee0:	f800283a 	ret
   10ee4:	d0a07004 	addi	r2,gp,-32320
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
   10ee8:	00c01444 	movi	r3,81
   10eec:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
   10ef0:	00bfffc4 	movi	r2,-1
   10ef4:	f800283a 	ret

00010ef8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10ef8:	deffff04 	addi	sp,sp,-4
   10efc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   10f00:	0010fd80 	call	10fd8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10f04:	00800044 	movi	r2,1
   10f08:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10f0c:	dfc00017 	ldw	ra,0(sp)
   10f10:	dec00104 	addi	sp,sp,4
   10f14:	f800283a 	ret

00010f18 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   10f18:	01000074 	movhi	r4,1
   10f1c:	d1600504 	addi	r5,gp,-32748
   10f20:	21046204 	addi	r4,r4,4488
   10f24:	0010f681 	jmpi	10f68 <alt_dev_llist_insert>

00010f28 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   10f28:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   10f2c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   10f30:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10f34:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   10f38:	2980072e 	bgeu	r5,r6,10f58 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   10f3c:	38c00037 	ldwio	r3,0(r7)
   10f40:	18ffffec 	andhi	r3,r3,65535
   10f44:	183ffc26 	beq	r3,zero,10f38 <__alt_data_end+0xffff0f38>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   10f48:	28c00007 	ldb	r3,0(r5)
   10f4c:	20c00035 	stwio	r3,0(r4)
   10f50:	29400044 	addi	r5,r5,1
   10f54:	003ff806 	br	10f38 <__alt_data_end+0xffff0f38>

  return count;
}
   10f58:	f800283a 	ret

00010f5c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   10f5c:	f800283a 	ret

00010f60 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   10f60:	3005883a 	mov	r2,r6
   10f64:	f800283a 	ret

00010f68 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   10f68:	20000226 	beq	r4,zero,10f74 <alt_dev_llist_insert+0xc>
   10f6c:	20800217 	ldw	r2,8(r4)
   10f70:	1000101e 	bne	r2,zero,10fb4 <alt_dev_llist_insert+0x4c>
   10f74:	d0a00917 	ldw	r2,-32732(gp)
   10f78:	10000926 	beq	r2,zero,10fa0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   10f7c:	deffff04 	addi	sp,sp,-4
   10f80:	dfc00015 	stw	ra,0(sp)
   10f84:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10f88:	00c00584 	movi	r3,22
   10f8c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10f90:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10f94:	dfc00017 	ldw	ra,0(sp)
   10f98:	dec00104 	addi	sp,sp,4
   10f9c:	f800283a 	ret
   10fa0:	d0a07004 	addi	r2,gp,-32320
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   10fa4:	00c00584 	movi	r3,22
   10fa8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   10fac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   10fb0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   10fb4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   10fb8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   10fbc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   10fc0:	28800017 	ldw	r2,0(r5)
   10fc4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   10fc8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   10fcc:	0005883a 	mov	r2,zero
   10fd0:	f800283a 	ret

00010fd4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   10fd4:	f800283a 	ret

00010fd8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   10fd8:	000170fa 	wrctl	ienable,zero
   10fdc:	f800283a 	ret

00010fe0 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   10fe0:	213ffe84 	addi	r4,r4,-6
   10fe4:	008003c4 	movi	r2,15
   10fe8:	11001636 	bltu	r2,r4,11044 <alt_exception_cause_generated_bad_addr+0x64>
   10fec:	200890ba 	slli	r4,r4,2
   10ff0:	00800074 	movhi	r2,1
   10ff4:	10840104 	addi	r2,r2,4100
   10ff8:	2089883a 	add	r4,r4,r2
   10ffc:	20800017 	ldw	r2,0(r4)
   11000:	1000683a 	jmp	r2
   11004:	0001104c 	andi	zero,zero,1089
   11008:	0001104c 	andi	zero,zero,1089
   1100c:	00011044 	movi	zero,1089
   11010:	00011044 	movi	zero,1089
   11014:	00011044 	movi	zero,1089
   11018:	0001104c 	andi	zero,zero,1089
   1101c:	00011044 	movi	zero,1089
   11020:	00011044 	movi	zero,1089
   11024:	0001104c 	andi	zero,zero,1089
   11028:	0001104c 	andi	zero,zero,1089
   1102c:	00011044 	movi	zero,1089
   11030:	0001104c 	andi	zero,zero,1089
   11034:	00011044 	movi	zero,1089
   11038:	00011044 	movi	zero,1089
   1103c:	00011044 	movi	zero,1089
   11040:	0001104c 	andi	zero,zero,1089
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   11044:	0005883a 	mov	r2,zero
   11048:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1104c:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   11050:	f800283a 	ret

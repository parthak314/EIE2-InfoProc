
Nios-ii-accelerometer.elf:     file format elf32-littlenios2
Nios-ii-accelerometer.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010180

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00001748 memsz 0x00001748 flags r-x
    LOAD off    0x00002768 vaddr 0x00011768 paddr 0x0001180c align 2**12
         filesz 0x000000a4 memsz 0x000000a4 flags rw-
    LOAD off    0x000028b0 vaddr 0x000118b0 paddr 0x000118b0 align 2**12
         filesz 0x00000000 memsz 0x0000013c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000014b0  00010180  00010180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000138  00011630  00011630  00002630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000a4  00011768  0001180c  00002768  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000013c  000118b0  000118b0  000028b0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000119ec  000119ec  0000280c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000400  00000000  00000000  00002830  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000038ff  00000000  00000000  00002c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018e1  00000000  00000000  0000652f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001acb  00000000  00000000  00007e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000051c  00000000  00000000  000098dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000015cf  00000000  00000000  00009df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000020e8  00000000  00000000  0000b3c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000d4b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000438  00000000  00000000  0000d4c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000eea6  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000eea9  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000eeac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000eead  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000eeae  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000eeb7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000eec0  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000012  00000000  00000000  0000eec9  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003a  00000000  00000000  0000eedb  2**0
                  CONTENTS, READONLY
 26 .jdi          00005009  00000000  00000000  0000ef15  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003e15d  00000000  00000000  00013f1e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010180 l    d  .text	00000000 .text
00011630 l    d  .rodata	00000000 .rodata
00011768 l    d  .rwdata	00000000 .rwdata
000118b0 l    d  .bss	00000000 .bss
000119ec l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Nios-ii-accelerometer_bsp//obj/HAL/src/crt0.o
000101b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000118b0 l     O .bss	00000004 buffer_index.2521
000118d8 l     O .bss	00000014 buffer.2520
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00011768 l     O .rwdata	0000002c accelerometer_spi
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0001147c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
000118d0 g     O .bss	00000004 alt_instruction_exception_handler
000112bc g     F .text	0000002c alt_main
0001023c g     F .text	00000014 led_write
000118ec g     O .bss	00000100 alt_irq
000102f4 g     F .text	000000e8 fir_filter
0001180c g       *ABS*	00000000 __flash_rwdata_start
00010f28 g     F .text	00000070 .hidden __fixsfsi
000101bc g     F .text	00000080 sys_timer_isr
000117f0 g     O .rwdata	00000004 jtag_uart
00011568 g     F .text	00000008 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00011370 g     F .text	00000058 alt_up_accelerometer_spi_read_x_axis
00010020 g       *ABS*	00000000 __flash_exceptions_start
000118d4 g     O .bss	00000004 errno
000118c8 g     O .bss	00000004 alt_argv
000197ec g       *ABS*	00000000 _gp
00011794 g     O .rwdata	00000030 alt_fd_list
000114f0 g     F .text	00000074 alt_find_dev
00011120 g     F .text	00000028 memcpy
00011570 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0001054c g     F .text	00000064 .hidden __udivsi3
000117f4 g     O .rwdata	00000004 alt_max_fd
00011148 g     F .text	00000094 alt_irq_register
000119ec g       *ABS*	00000000 __bss_end
000118c0 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	00000060 alt_irq_handler
000117c4 g     O .rwdata	00000028 alt_dev_null
00011478 g     F .text	00000004 alt_dcache_flush_all
0001180c g       *ABS*	00000000 __ram_rwdata_end
00010284 g     F .text	00000070 timer_init
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory
000117f8 g     O .rwdata	00000008 alt_dev_list
00011768 g       *ABS*	00000000 __ram_rodata_end
000118b8 g     O .bss	00000001 led
000105b0 g     F .text	00000058 .hidden __umodsi3
000119ec g       *ABS*	00000000 end
0001015c g     F .exceptions	00000024 alt_instruction_exception_entry
00020000 g       *ABS*	00000000 __alt_stack_pointer
000110bc g     F .text	00000064 .hidden __clzsi2
00010180 g     F .text	0000003c _start
000118bc g     O .bss	00000004 level
00011308 g     F .text	00000010 alt_sys_init
00011320 g     F .text	00000014 alt_up_accelerometer_spi_read_address_register
00010f98 g     F .text	00000124 .hidden __floatsisf
00010608 g     F .text	00000028 .hidden __mulsi3
00011768 g       *ABS*	00000000 __ram_rwdata_start
00011630 g       *ABS*	00000000 __ram_rodata_start
000113c8 g     F .text	00000058 alt_up_accelerometer_spi_read_y_axis
000115e4 g     F .text	00000030 memcmp
000119ec g       *ABS*	00000000 __alt_stack_base
00011484 g     F .text	0000006c alt_dev_llist_insert
000118b0 g       *ABS*	00000000 __bss_start
000103dc g     F .text	00000078 main
000118c4 g     O .bss	00000004 alt_envp
00011808 g     O .rwdata	00000004 alt_errno
00010454 g     F .text	00000084 .hidden __divsi3
00010af8 g     F .text	00000430 .hidden __mulsf3
00011630 g       *ABS*	00000000 __flash_rodata_start
000112e8 g     F .text	00000020 alt_irq_init
0001165b g     O .rodata	00000100 .hidden __clz_tab
000118cc g     O .bss	00000004 alt_argc
00010020 g       .exceptions	00000000 alt_irq_entry
000118b4 g     O .bss	00000001 pwm
00011800 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00011318 g     F .text	00000008 alt_up_accelerometer_spi_open_dev
0001180c g       *ABS*	00000000 _edata
000119ec g       *ABS*	00000000 _end
00010180 g       *ABS*	00000000 __ram_exceptions_end
000104d8 g     F .text	00000074 .hidden __modsi3
00011420 g     F .text	00000058 alt_up_accelerometer_spi_read_z_axis
00020000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
00010250 g     F .text	00000034 convert_read
0001000c g       .entry	00000000 _exit
00011334 g     F .text	00000020 alt_up_accelerometer_spi_read
00011354 g     F .text	0000001c alt_up_accelerometer_spi_write
00011614 g     F .text	0000001c strlen
00011564 g     F .text	00000004 alt_icache_flush_all
000117ec g     O .rwdata	00000004 alt_priority_mask
00010630 g     F .text	000004c8 .hidden __addsf3
000111dc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08406014 	ori	at,at,384
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	001015c0 	call	1015c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defffe04 	addi	sp,sp,-8
   10100:	dfc00115 	stw	ra,4(sp)
   10104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10108:	0007313a 	rdctl	r3,ipending
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   1010c:	04000074 	movhi	r16,1
   10110:	84063b04 	addi	r16,r16,6380

  active = alt_irq_pending ();

  do
  {
    i = 0;
   10114:	000b883a 	mov	r5,zero
    mask = 1;
   10118:	00800044 	movi	r2,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1011c:	1888703a 	and	r4,r3,r2
   10120:	20000b26 	beq	r4,zero,10150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   10124:	280490fa 	slli	r2,r5,3
   10128:	8085883a 	add	r2,r16,r2
   1012c:	10c00017 	ldw	r3,0(r2)
   10130:	11000117 	ldw	r4,4(r2)
   10134:	183ee83a 	callr	r3
   10138:	0007313a 	rdctl	r3,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   1013c:	183ff51e 	bne	r3,zero,10114 <__alt_data_end+0xffff0114>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   10140:	dfc00117 	ldw	ra,4(sp)
   10144:	dc000017 	ldw	r16,0(sp)
   10148:	dec00204 	addi	sp,sp,8
   1014c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   10150:	1085883a 	add	r2,r2,r2
      i++;
   10154:	29400044 	addi	r5,r5,1

    } while (1);
   10158:	003ff006 	br	1011c <__alt_data_end+0xffff011c>

0001015c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   1015c:	d0a03917 	ldw	r2,-32540(gp)
   10160:	10000426 	beq	r2,zero,10174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   10164:	200b883a 	mov	r5,r4
   10168:	000d883a 	mov	r6,zero
   1016c:	013fffc4 	movi	r4,-1
   10170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   10178:	0005883a 	mov	r2,zero
   1017c:	f800283a 	ret

Disassembly of section .text:

00010180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10180:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
   10184:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10188:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1018c:	d6a5fb14 	ori	gp,gp,38892
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10190:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10194:	10862c14 	ori	r2,r2,6320

    movhi r3, %hi(__bss_end)
   10198:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1019c:	18c67b14 	ori	r3,r3,6636

    beq r2, r3, 1f
   101a0:	10c00326 	beq	r2,r3,101b0 <_start+0x30>

0:
    stw zero, (r2)
   101a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   101a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   101ac:	10fffd36 	bltu	r2,r3,101a4 <__alt_data_end+0xffff01a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   101b0:	00111dc0 	call	111dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   101b4:	00112bc0 	call	112bc <alt_main>

000101b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   101b8:	003fff06 	br	101b8 <__alt_data_end+0xffff01b8>

000101bc <sys_timer_isr>:
    * led = (8 >> val) | (8 << (8 - val));
    * level = (acc_read >> 1) & 0x1f;
}

void sys_timer_isr() {
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   101bc:	008000b4 	movhi	r2,2
   101c0:	10840004 	addi	r2,r2,4096
   101c4:	10000035 	stwio	zero,0(r2)

    if (pwm < abs(level)) {
   101c8:	d0a03417 	ldw	r2,-32560(gp)
   101cc:	d1603207 	ldb	r5,-32568(gp)
   101d0:	1009883a 	mov	r4,r2
   101d4:	1000010e 	bge	r2,zero,101dc <sys_timer_isr+0x20>
   101d8:	0089c83a 	sub	r4,zero,r2
   101dc:	00c000b4 	movhi	r3,2
   101e0:	18c40804 	addi	r3,r3,4128
   101e4:	2900080e 	bge	r5,r4,10208 <sys_timer_isr+0x4c>

        if (level < 0) {
   101e8:	1000040e 	bge	r2,zero,101fc <sys_timer_isr+0x40>
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   101ec:	d0a03303 	ldbu	r2,-32564(gp)
   101f0:	1085883a 	add	r2,r2,r2
   101f4:	10803fcc 	andi	r2,r2,255
   101f8:	00000406 	br	1020c <sys_timer_isr+0x50>
   101fc:	d0a03303 	ldbu	r2,-32564(gp)
   10200:	1004d07a 	srli	r2,r2,1
   10204:	00000106 	br	1020c <sys_timer_isr+0x50>
   10208:	d0a03303 	ldbu	r2,-32564(gp)
   1020c:	18800035 	stwio	r2,0(r3)

    } else {
        led_write(led);
    }

    if (pwm > PWM_PERIOD) {
   10210:	d0a03203 	ldbu	r2,-32568(gp)
   10214:	01000404 	movi	r4,16
   10218:	10c03fcc 	andi	r3,r2,255
   1021c:	18c0201c 	xori	r3,r3,128
   10220:	18ffe004 	addi	r3,r3,-128
   10224:	20c0020e 	bge	r4,r3,10230 <sys_timer_isr+0x74>
        pwm = 0;
   10228:	d0203205 	stb	zero,-32568(gp)
   1022c:	f800283a 	ret
    } else {
        pwm++;
   10230:	10800044 	addi	r2,r2,1
   10234:	d0a03205 	stb	r2,-32568(gp)
   10238:	f800283a 	ret

0001023c <led_write>:
alt_8 pwm = 0;
alt_u8 led;
int level;

void led_write(alt_u8 led_pattern) {
    IOWR(LED_BASE, 0, led_pattern);
   1023c:	008000b4 	movhi	r2,2
   10240:	21003fcc 	andi	r4,r4,255
   10244:	10840804 	addi	r2,r2,4128
   10248:	11000035 	stwio	r4,0(r2)
   1024c:	f800283a 	ret

00010250 <convert_read>:
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
   10250:	213ff804 	addi	r4,r4,-32
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10254:	2005d1ba 	srai	r2,r4,6
    * level = (acc_read >> 1) & 0x1f;
   10258:	2009d07a 	srai	r4,r4,1
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   1025c:	10c001cc 	andi	r3,r2,7
   10260:	00800204 	movi	r2,8
   10264:	10cfc83a 	sub	r7,r2,r3
   10268:	11ce983a 	sll	r7,r2,r7
   1026c:	10c5d83a 	sra	r2,r2,r3
    * level = (acc_read >> 1) & 0x1f;
   10270:	210007cc 	andi	r4,r4,31
}

void convert_read(alt_32 acc_read, int * level, alt_u8 * led) {
    acc_read += OFFSET;
    alt_u8 val = (acc_read >> 6) & 0x07;
    * led = (8 >> val) | (8 << (8 - val));
   10274:	3884b03a 	or	r2,r7,r2
   10278:	30800005 	stb	r2,0(r6)
    * level = (acc_read >> 1) & 0x1f;
   1027c:	29000015 	stw	r4,0(r5)
   10280:	f800283a 	ret

00010284 <timer_init>:
        pwm++;
    }

}

void timer_init(void * isr) {
   10284:	defffe04 	addi	sp,sp,-8
   10288:	dc000015 	stw	r16,0(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   1028c:	040000b4 	movhi	r16,2
        pwm++;
    }

}

void timer_init(void * isr) {
   10290:	dfc00115 	stw	ra,4(sp)

    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003);
   10294:	84040104 	addi	r16,r16,4100
   10298:	008000c4 	movi	r2,3
   1029c:	80800035 	stwio	r2,0(r16)
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);
   102a0:	00c000b4 	movhi	r3,2
   102a4:	0005883a 	mov	r2,zero
   102a8:	18c40004 	addi	r3,r3,4096
   102ac:	18800035 	stwio	r2,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, 0x0900);
   102b0:	00c000b4 	movhi	r3,2
   102b4:	18c40204 	addi	r3,r3,4104
   102b8:	01424004 	movi	r5,2304
   102bc:	19400035 	stwio	r5,0(r3)
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, 0x0000);
   102c0:	00c000b4 	movhi	r3,2
   102c4:	18c40304 	addi	r3,r3,4108
   102c8:	18800035 	stwio	r2,0(r3)
    alt_irq_register(TIMER_IRQ, 0, isr);
   102cc:	200d883a 	mov	r6,r4
   102d0:	000b883a 	mov	r5,zero
   102d4:	0009883a 	mov	r4,zero
   102d8:	00111480 	call	11148 <alt_irq_register>
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);
   102dc:	008001c4 	movi	r2,7
   102e0:	80800035 	stwio	r2,0(r16)

}
   102e4:	dfc00117 	ldw	ra,4(sp)
   102e8:	dc000017 	ldw	r16,0(sp)
   102ec:	dec00204 	addi	sp,sp,8
   102f0:	f800283a 	ret

000102f4 <fir_filter>:

float fir_filter(float current_reading) {
   102f4:	defff404 	addi	sp,sp,-48
	static float buffer[NUM_TAPS] = {0};
	static int buffer_index = 0;
	float coefficients[NUM_TAPS] = {0.2, 0.2, 0.2, 0.2, 0.2};
   102f8:	01400074 	movhi	r5,1
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

float fir_filter(float current_reading) {
   102fc:	dc000515 	stw	r16,20(sp)
	static float buffer[NUM_TAPS] = {0};
	static int buffer_index = 0;
	float coefficients[NUM_TAPS] = {0.2, 0.2, 0.2, 0.2, 0.2};
   10300:	01800504 	movi	r6,20
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

float fir_filter(float current_reading) {
   10304:	2021883a 	mov	r16,r4
	static float buffer[NUM_TAPS] = {0};
	static int buffer_index = 0;
	float coefficients[NUM_TAPS] = {0.2, 0.2, 0.2, 0.2, 0.2};
   10308:	29458c04 	addi	r5,r5,5680
   1030c:	d809883a 	mov	r4,sp
    alt_irq_register(TIMER_IRQ, 0, isr);
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0007);

}

float fir_filter(float current_reading) {
   10310:	dd400a15 	stw	r21,40(sp)
   10314:	dcc00815 	stw	r19,32(sp)
   10318:	dc800715 	stw	r18,28(sp)
   1031c:	dc400615 	stw	r17,24(sp)
   10320:	dfc00b15 	stw	ra,44(sp)
   10324:	dd000915 	stw	r20,36(sp)
	static float buffer[NUM_TAPS] = {0};
	static int buffer_index = 0;
	float coefficients[NUM_TAPS] = {0.2, 0.2, 0.2, 0.2, 0.2};
   10328:	00111200 	call	11120 <memcpy>
	float output = 0.0;

	buffer[buffer_index] = current_reading;
   1032c:	d4a03117 	ldw	r18,-32572(gp)
   10330:	04c00074 	movhi	r19,1
   10334:	9cc63604 	addi	r19,r19,6360
   10338:	94a3883a 	add	r17,r18,r18
   1033c:	8c63883a 	add	r17,r17,r17
   10340:	9c45883a 	add	r2,r19,r17
   10344:	14000015 	stw	r16,0(r2)

float fir_filter(float current_reading) {
	static float buffer[NUM_TAPS] = {0};
	static int buffer_index = 0;
	float coefficients[NUM_TAPS] = {0.2, 0.2, 0.2, 0.2, 0.2};
	float output = 0.0;
   10348:	002b883a 	mov	r21,zero
   1034c:	94000144 	addi	r16,r18,5

	buffer[buffer_index] = current_reading;

	for (int i = 0; i < NUM_TAPS; i++) {
		output += coefficients[i] * buffer[(buffer_index - i + NUM_TAPS) % NUM_TAPS];
   10350:	8009883a 	mov	r4,r16
   10354:	017fff04 	movi	r5,-4
   10358:	00106080 	call	10608 <__mulsi3>
   1035c:	8009883a 	mov	r4,r16
   10360:	1445883a 	add	r2,r2,r17
   10364:	01400144 	movi	r5,5
   10368:	d8a9883a 	add	r20,sp,r2
   1036c:	00104d80 	call	104d8 <__modsi3>
   10370:	1085883a 	add	r2,r2,r2
   10374:	1085883a 	add	r2,r2,r2
   10378:	9885883a 	add	r2,r19,r2
   1037c:	a1000517 	ldw	r4,20(r20)
   10380:	11400017 	ldw	r5,0(r2)
   10384:	843fffc4 	addi	r16,r16,-1
   10388:	0010af80 	call	10af8 <__mulsf3>
   1038c:	a809883a 	mov	r4,r21
   10390:	100b883a 	mov	r5,r2
   10394:	00106300 	call	10630 <__addsf3>
   10398:	1029883a 	mov	r20,r2
   1039c:	102b883a 	mov	r21,r2
	float coefficients[NUM_TAPS] = {0.2, 0.2, 0.2, 0.2, 0.2};
	float output = 0.0;

	buffer[buffer_index] = current_reading;

	for (int i = 0; i < NUM_TAPS; i++) {
   103a0:	84bfeb1e 	bne	r16,r18,10350 <__alt_data_end+0xffff0350>
		output += coefficients[i] * buffer[(buffer_index - i + NUM_TAPS) % NUM_TAPS];
	}

	buffer_index = (buffer_index + 1) % NUM_TAPS;
   103a4:	01400144 	movi	r5,5
   103a8:	81000044 	addi	r4,r16,1
   103ac:	00104d80 	call	104d8 <__modsi3>
   103b0:	d0a03115 	stw	r2,-32572(gp)

	return output;
}
   103b4:	a005883a 	mov	r2,r20
   103b8:	dfc00b17 	ldw	ra,44(sp)
   103bc:	dd400a17 	ldw	r21,40(sp)
   103c0:	dd000917 	ldw	r20,36(sp)
   103c4:	dcc00817 	ldw	r19,32(sp)
   103c8:	dc800717 	ldw	r18,28(sp)
   103cc:	dc400617 	ldw	r17,24(sp)
   103d0:	dc000517 	ldw	r16,20(sp)
   103d4:	dec00c04 	addi	sp,sp,48
   103d8:	f800283a 	ret

000103dc <main>:

int main() {

    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   103dc:	01000074 	movhi	r4,1
	buffer_index = (buffer_index + 1) % NUM_TAPS;

	return output;
}

int main() {
   103e0:	defffd04 	addi	sp,sp,-12

    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   103e4:	21059104 	addi	r4,r4,5700
	buffer_index = (buffer_index + 1) % NUM_TAPS;

	return output;
}

int main() {
   103e8:	dfc00215 	stw	ra,8(sp)
   103ec:	dc000115 	stw	r16,4(sp)

    alt_32 x_read;
    alt_up_accelerometer_spi_dev * acc_dev;
    acc_dev = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi");
   103f0:	00113180 	call	11318 <alt_up_accelerometer_spi_open_dev>
    if (acc_dev == NULL) { // if return 1, check if the spi ip name is "accelerometer_spi"
   103f4:	10001226 	beq	r2,zero,10440 <main+0x64>
        return 1;
    }

    timer_init(sys_timer_isr);
   103f8:	01000074 	movhi	r4,1
   103fc:	21006f04 	addi	r4,r4,444
   10400:	1021883a 	mov	r16,r2
   10404:	00102840 	call	10284 <timer_init>
    while (1) {

        alt_up_accelerometer_spi_read_x_axis(acc_dev, & x_read);
   10408:	d80b883a 	mov	r5,sp
   1040c:	8009883a 	mov	r4,r16
   10410:	00113700 	call	11370 <alt_up_accelerometer_spi_read_x_axis>
//        alt_printf("raw data: %x\n", x_read);
//        convert_read(x_read, & level, & led);

        float filtered_reading = fir_filter(x_read);
   10414:	d9000017 	ldw	r4,0(sp)
   10418:	0010f980 	call	10f98 <__floatsisf>
   1041c:	1009883a 	mov	r4,r2
   10420:	00102f40 	call	102f4 <fir_filter>
        convert_read(filtered_reading, & level, & led);
   10424:	1009883a 	mov	r4,r2
   10428:	0010f280 	call	10f28 <__fixsfsi>
   1042c:	d1a03304 	addi	r6,gp,-32564
   10430:	d1603404 	addi	r5,gp,-32560
   10434:	1009883a 	mov	r4,r2
   10438:	00102500 	call	10250 <convert_read>
   1043c:	003ff206 	br	10408 <__alt_data_end+0xffff0408>

    }

    return 0;
}
   10440:	00800044 	movi	r2,1
   10444:	dfc00217 	ldw	ra,8(sp)
   10448:	dc000117 	ldw	r16,4(sp)
   1044c:	dec00304 	addi	sp,sp,12
   10450:	f800283a 	ret

00010454 <__divsi3>:
   10454:	20001b16 	blt	r4,zero,104c4 <__divsi3+0x70>
   10458:	000f883a 	mov	r7,zero
   1045c:	28001616 	blt	r5,zero,104b8 <__divsi3+0x64>
   10460:	200d883a 	mov	r6,r4
   10464:	29001a2e 	bgeu	r5,r4,104d0 <__divsi3+0x7c>
   10468:	00800804 	movi	r2,32
   1046c:	00c00044 	movi	r3,1
   10470:	00000106 	br	10478 <__divsi3+0x24>
   10474:	10000d26 	beq	r2,zero,104ac <__divsi3+0x58>
   10478:	294b883a 	add	r5,r5,r5
   1047c:	10bfffc4 	addi	r2,r2,-1
   10480:	18c7883a 	add	r3,r3,r3
   10484:	293ffb36 	bltu	r5,r4,10474 <__alt_data_end+0xffff0474>
   10488:	0005883a 	mov	r2,zero
   1048c:	18000726 	beq	r3,zero,104ac <__divsi3+0x58>
   10490:	0005883a 	mov	r2,zero
   10494:	31400236 	bltu	r6,r5,104a0 <__divsi3+0x4c>
   10498:	314dc83a 	sub	r6,r6,r5
   1049c:	10c4b03a 	or	r2,r2,r3
   104a0:	1806d07a 	srli	r3,r3,1
   104a4:	280ad07a 	srli	r5,r5,1
   104a8:	183ffa1e 	bne	r3,zero,10494 <__alt_data_end+0xffff0494>
   104ac:	38000126 	beq	r7,zero,104b4 <__divsi3+0x60>
   104b0:	0085c83a 	sub	r2,zero,r2
   104b4:	f800283a 	ret
   104b8:	014bc83a 	sub	r5,zero,r5
   104bc:	39c0005c 	xori	r7,r7,1
   104c0:	003fe706 	br	10460 <__alt_data_end+0xffff0460>
   104c4:	0109c83a 	sub	r4,zero,r4
   104c8:	01c00044 	movi	r7,1
   104cc:	003fe306 	br	1045c <__alt_data_end+0xffff045c>
   104d0:	00c00044 	movi	r3,1
   104d4:	003fee06 	br	10490 <__alt_data_end+0xffff0490>

000104d8 <__modsi3>:
   104d8:	20001716 	blt	r4,zero,10538 <__modsi3+0x60>
   104dc:	000f883a 	mov	r7,zero
   104e0:	2005883a 	mov	r2,r4
   104e4:	28001216 	blt	r5,zero,10530 <__modsi3+0x58>
   104e8:	2900162e 	bgeu	r5,r4,10544 <__modsi3+0x6c>
   104ec:	01800804 	movi	r6,32
   104f0:	00c00044 	movi	r3,1
   104f4:	00000106 	br	104fc <__modsi3+0x24>
   104f8:	30000a26 	beq	r6,zero,10524 <__modsi3+0x4c>
   104fc:	294b883a 	add	r5,r5,r5
   10500:	31bfffc4 	addi	r6,r6,-1
   10504:	18c7883a 	add	r3,r3,r3
   10508:	293ffb36 	bltu	r5,r4,104f8 <__alt_data_end+0xffff04f8>
   1050c:	18000526 	beq	r3,zero,10524 <__modsi3+0x4c>
   10510:	1806d07a 	srli	r3,r3,1
   10514:	11400136 	bltu	r2,r5,1051c <__modsi3+0x44>
   10518:	1145c83a 	sub	r2,r2,r5
   1051c:	280ad07a 	srli	r5,r5,1
   10520:	183ffb1e 	bne	r3,zero,10510 <__alt_data_end+0xffff0510>
   10524:	38000126 	beq	r7,zero,1052c <__modsi3+0x54>
   10528:	0085c83a 	sub	r2,zero,r2
   1052c:	f800283a 	ret
   10530:	014bc83a 	sub	r5,zero,r5
   10534:	003fec06 	br	104e8 <__alt_data_end+0xffff04e8>
   10538:	0109c83a 	sub	r4,zero,r4
   1053c:	01c00044 	movi	r7,1
   10540:	003fe706 	br	104e0 <__alt_data_end+0xffff04e0>
   10544:	00c00044 	movi	r3,1
   10548:	003ff106 	br	10510 <__alt_data_end+0xffff0510>

0001054c <__udivsi3>:
   1054c:	200d883a 	mov	r6,r4
   10550:	2900152e 	bgeu	r5,r4,105a8 <__udivsi3+0x5c>
   10554:	28001416 	blt	r5,zero,105a8 <__udivsi3+0x5c>
   10558:	00800804 	movi	r2,32
   1055c:	00c00044 	movi	r3,1
   10560:	00000206 	br	1056c <__udivsi3+0x20>
   10564:	10000e26 	beq	r2,zero,105a0 <__udivsi3+0x54>
   10568:	28000516 	blt	r5,zero,10580 <__udivsi3+0x34>
   1056c:	294b883a 	add	r5,r5,r5
   10570:	10bfffc4 	addi	r2,r2,-1
   10574:	18c7883a 	add	r3,r3,r3
   10578:	293ffa36 	bltu	r5,r4,10564 <__alt_data_end+0xffff0564>
   1057c:	18000826 	beq	r3,zero,105a0 <__udivsi3+0x54>
   10580:	0005883a 	mov	r2,zero
   10584:	31400236 	bltu	r6,r5,10590 <__udivsi3+0x44>
   10588:	314dc83a 	sub	r6,r6,r5
   1058c:	10c4b03a 	or	r2,r2,r3
   10590:	1806d07a 	srli	r3,r3,1
   10594:	280ad07a 	srli	r5,r5,1
   10598:	183ffa1e 	bne	r3,zero,10584 <__alt_data_end+0xffff0584>
   1059c:	f800283a 	ret
   105a0:	0005883a 	mov	r2,zero
   105a4:	f800283a 	ret
   105a8:	00c00044 	movi	r3,1
   105ac:	003ff406 	br	10580 <__alt_data_end+0xffff0580>

000105b0 <__umodsi3>:
   105b0:	2005883a 	mov	r2,r4
   105b4:	2900122e 	bgeu	r5,r4,10600 <__umodsi3+0x50>
   105b8:	28001116 	blt	r5,zero,10600 <__umodsi3+0x50>
   105bc:	01800804 	movi	r6,32
   105c0:	00c00044 	movi	r3,1
   105c4:	00000206 	br	105d0 <__umodsi3+0x20>
   105c8:	30000c26 	beq	r6,zero,105fc <__umodsi3+0x4c>
   105cc:	28000516 	blt	r5,zero,105e4 <__umodsi3+0x34>
   105d0:	294b883a 	add	r5,r5,r5
   105d4:	31bfffc4 	addi	r6,r6,-1
   105d8:	18c7883a 	add	r3,r3,r3
   105dc:	293ffa36 	bltu	r5,r4,105c8 <__alt_data_end+0xffff05c8>
   105e0:	18000626 	beq	r3,zero,105fc <__umodsi3+0x4c>
   105e4:	1806d07a 	srli	r3,r3,1
   105e8:	11400136 	bltu	r2,r5,105f0 <__umodsi3+0x40>
   105ec:	1145c83a 	sub	r2,r2,r5
   105f0:	280ad07a 	srli	r5,r5,1
   105f4:	183ffb1e 	bne	r3,zero,105e4 <__alt_data_end+0xffff05e4>
   105f8:	f800283a 	ret
   105fc:	f800283a 	ret
   10600:	00c00044 	movi	r3,1
   10604:	003ff706 	br	105e4 <__alt_data_end+0xffff05e4>

00010608 <__mulsi3>:
   10608:	0005883a 	mov	r2,zero
   1060c:	20000726 	beq	r4,zero,1062c <__mulsi3+0x24>
   10610:	20c0004c 	andi	r3,r4,1
   10614:	2008d07a 	srli	r4,r4,1
   10618:	18000126 	beq	r3,zero,10620 <__mulsi3+0x18>
   1061c:	1145883a 	add	r2,r2,r5
   10620:	294b883a 	add	r5,r5,r5
   10624:	203ffa1e 	bne	r4,zero,10610 <__alt_data_end+0xffff0610>
   10628:	f800283a 	ret
   1062c:	f800283a 	ret

00010630 <__addsf3>:
   10630:	defffc04 	addi	sp,sp,-16
   10634:	2004d7fa 	srli	r2,r4,31
   10638:	280cd5fa 	srli	r6,r5,23
   1063c:	dc000015 	stw	r16,0(sp)
   10640:	00c02034 	movhi	r3,128
   10644:	2020d5fa 	srli	r16,r4,23
   10648:	280ed7fa 	srli	r7,r5,31
   1064c:	18ffffc4 	addi	r3,r3,-1
   10650:	dc400115 	stw	r17,4(sp)
   10654:	1908703a 	and	r4,r3,r4
   10658:	194a703a 	and	r5,r3,r5
   1065c:	dfc00315 	stw	ra,12(sp)
   10660:	dc800215 	stw	r18,8(sp)
   10664:	14403fcc 	andi	r17,r2,255
   10668:	84003fcc 	andi	r16,r16,255
   1066c:	200890fa 	slli	r4,r4,3
   10670:	31803fcc 	andi	r6,r6,255
   10674:	280a90fa 	slli	r5,r5,3
   10678:	89c05026 	beq	r17,r7,107bc <__addsf3+0x18c>
   1067c:	8185c83a 	sub	r2,r16,r6
   10680:	00807a0e 	bge	zero,r2,1086c <__addsf3+0x23c>
   10684:	30001e1e 	bne	r6,zero,10700 <__addsf3+0xd0>
   10688:	28006d1e 	bne	r5,zero,10840 <__addsf3+0x210>
   1068c:	208001cc 	andi	r2,r4,7
   10690:	10000426 	beq	r2,zero,106a4 <__addsf3+0x74>
   10694:	208003cc 	andi	r2,r4,15
   10698:	00c00104 	movi	r3,4
   1069c:	10c00126 	beq	r2,r3,106a4 <__addsf3+0x74>
   106a0:	20c9883a 	add	r4,r4,r3
   106a4:	2081002c 	andhi	r2,r4,1024
   106a8:	10003926 	beq	r2,zero,10790 <__addsf3+0x160>
   106ac:	84000044 	addi	r16,r16,1
   106b0:	00803fc4 	movi	r2,255
   106b4:	80807826 	beq	r16,r2,10898 <__addsf3+0x268>
   106b8:	200891ba 	slli	r4,r4,6
   106bc:	8805883a 	mov	r2,r17
   106c0:	2008d27a 	srli	r4,r4,9
   106c4:	84003fcc 	andi	r16,r16,255
   106c8:	800695fa 	slli	r3,r16,23
   106cc:	10803fcc 	andi	r2,r2,255
   106d0:	04002034 	movhi	r16,128
   106d4:	843fffc4 	addi	r16,r16,-1
   106d8:	100497fa 	slli	r2,r2,31
   106dc:	2408703a 	and	r4,r4,r16
   106e0:	20e0b03a 	or	r16,r4,r3
   106e4:	8084b03a 	or	r2,r16,r2
   106e8:	dfc00317 	ldw	ra,12(sp)
   106ec:	dc800217 	ldw	r18,8(sp)
   106f0:	dc400117 	ldw	r17,4(sp)
   106f4:	dc000017 	ldw	r16,0(sp)
   106f8:	dec00404 	addi	sp,sp,16
   106fc:	f800283a 	ret
   10700:	00c03fc4 	movi	r3,255
   10704:	80ffe126 	beq	r16,r3,1068c <__alt_data_end+0xffff068c>
   10708:	29410034 	orhi	r5,r5,1024
   1070c:	00c006c4 	movi	r3,27
   10710:	18807516 	blt	r3,r2,108e8 <__addsf3+0x2b8>
   10714:	00c00804 	movi	r3,32
   10718:	1887c83a 	sub	r3,r3,r2
   1071c:	28c6983a 	sll	r3,r5,r3
   10720:	288ad83a 	srl	r5,r5,r2
   10724:	1804c03a 	cmpne	r2,r3,zero
   10728:	288ab03a 	or	r5,r5,r2
   1072c:	2149c83a 	sub	r4,r4,r5
   10730:	2081002c 	andhi	r2,r4,1024
   10734:	10001426 	beq	r2,zero,10788 <__addsf3+0x158>
   10738:	04810034 	movhi	r18,1024
   1073c:	94bfffc4 	addi	r18,r18,-1
   10740:	24a4703a 	and	r18,r4,r18
   10744:	9009883a 	mov	r4,r18
   10748:	00110bc0 	call	110bc <__clzsi2>
   1074c:	10bffec4 	addi	r2,r2,-5
   10750:	90a4983a 	sll	r18,r18,r2
   10754:	14005416 	blt	r2,r16,108a8 <__addsf3+0x278>
   10758:	1405c83a 	sub	r2,r2,r16
   1075c:	11000044 	addi	r4,r2,1
   10760:	00800804 	movi	r2,32
   10764:	1105c83a 	sub	r2,r2,r4
   10768:	9084983a 	sll	r2,r18,r2
   1076c:	9124d83a 	srl	r18,r18,r4
   10770:	0021883a 	mov	r16,zero
   10774:	1008c03a 	cmpne	r4,r2,zero
   10778:	9108b03a 	or	r4,r18,r4
   1077c:	003fc306 	br	1068c <__alt_data_end+0xffff068c>
   10780:	1000db26 	beq	r2,zero,10af0 <__addsf3+0x4c0>
   10784:	1009883a 	mov	r4,r2
   10788:	208001cc 	andi	r2,r4,7
   1078c:	103fc11e 	bne	r2,zero,10694 <__alt_data_end+0xffff0694>
   10790:	2006d0fa 	srli	r3,r4,3
   10794:	01003fc4 	movi	r4,255
   10798:	8805883a 	mov	r2,r17
   1079c:	8100241e 	bne	r16,r4,10830 <__addsf3+0x200>
   107a0:	18006e26 	beq	r3,zero,1095c <__addsf3+0x32c>
   107a4:	19001034 	orhi	r4,r3,64
   107a8:	00c02034 	movhi	r3,128
   107ac:	18ffffc4 	addi	r3,r3,-1
   107b0:	043fffc4 	movi	r16,-1
   107b4:	20c8703a 	and	r4,r4,r3
   107b8:	003fc206 	br	106c4 <__alt_data_end+0xffff06c4>
   107bc:	8187c83a 	sub	r3,r16,r6
   107c0:	00c03e0e 	bge	zero,r3,108bc <__addsf3+0x28c>
   107c4:	30002326 	beq	r6,zero,10854 <__addsf3+0x224>
   107c8:	01803fc4 	movi	r6,255
   107cc:	81bfaf26 	beq	r16,r6,1068c <__alt_data_end+0xffff068c>
   107d0:	29410034 	orhi	r5,r5,1024
   107d4:	018006c4 	movi	r6,27
   107d8:	30c07416 	blt	r6,r3,109ac <__addsf3+0x37c>
   107dc:	01800804 	movi	r6,32
   107e0:	30cdc83a 	sub	r6,r6,r3
   107e4:	298c983a 	sll	r6,r5,r6
   107e8:	28cad83a 	srl	r5,r5,r3
   107ec:	3006c03a 	cmpne	r3,r6,zero
   107f0:	28cab03a 	or	r5,r5,r3
   107f4:	2149883a 	add	r4,r4,r5
   107f8:	20c1002c 	andhi	r3,r4,1024
   107fc:	183fe226 	beq	r3,zero,10788 <__alt_data_end+0xffff0788>
   10800:	84000044 	addi	r16,r16,1
   10804:	00c03fc4 	movi	r3,255
   10808:	80c05426 	beq	r16,r3,1095c <__addsf3+0x32c>
   1080c:	00bf0034 	movhi	r2,64512
   10810:	10bfffc4 	addi	r2,r2,-1
   10814:	20c0004c 	andi	r3,r4,1
   10818:	2088703a 	and	r4,r4,r2
   1081c:	2008d07a 	srli	r4,r4,1
   10820:	20c8b03a 	or	r4,r4,r3
   10824:	003f9906 	br	1068c <__alt_data_end+0xffff068c>
   10828:	0007883a 	mov	r3,zero
   1082c:	0005883a 	mov	r2,zero
   10830:	01002034 	movhi	r4,128
   10834:	213fffc4 	addi	r4,r4,-1
   10838:	1908703a 	and	r4,r3,r4
   1083c:	003fa106 	br	106c4 <__alt_data_end+0xffff06c4>
   10840:	10bfffc4 	addi	r2,r2,-1
   10844:	103fb926 	beq	r2,zero,1072c <__alt_data_end+0xffff072c>
   10848:	00c03fc4 	movi	r3,255
   1084c:	80ffaf1e 	bne	r16,r3,1070c <__alt_data_end+0xffff070c>
   10850:	003f8e06 	br	1068c <__alt_data_end+0xffff068c>
   10854:	283f8d26 	beq	r5,zero,1068c <__alt_data_end+0xffff068c>
   10858:	18ffffc4 	addi	r3,r3,-1
   1085c:	183fe526 	beq	r3,zero,107f4 <__alt_data_end+0xffff07f4>
   10860:	01803fc4 	movi	r6,255
   10864:	81bfdb1e 	bne	r16,r6,107d4 <__alt_data_end+0xffff07d4>
   10868:	003f8806 	br	1068c <__alt_data_end+0xffff068c>
   1086c:	1000201e 	bne	r2,zero,108f0 <__addsf3+0x2c0>
   10870:	80800044 	addi	r2,r16,1
   10874:	10803fcc 	andi	r2,r2,255
   10878:	01800044 	movi	r6,1
   1087c:	3080450e 	bge	r6,r2,10994 <__addsf3+0x364>
   10880:	2165c83a 	sub	r18,r4,r5
   10884:	90c1002c 	andhi	r3,r18,1024
   10888:	18002b26 	beq	r3,zero,10938 <__addsf3+0x308>
   1088c:	2925c83a 	sub	r18,r5,r4
   10890:	3823883a 	mov	r17,r7
   10894:	003fab06 	br	10744 <__alt_data_end+0xffff0744>
   10898:	8805883a 	mov	r2,r17
   1089c:	043fffc4 	movi	r16,-1
   108a0:	0009883a 	mov	r4,zero
   108a4:	003f8706 	br	106c4 <__alt_data_end+0xffff06c4>
   108a8:	013f0034 	movhi	r4,64512
   108ac:	213fffc4 	addi	r4,r4,-1
   108b0:	80a1c83a 	sub	r16,r16,r2
   108b4:	9108703a 	and	r4,r18,r4
   108b8:	003f7406 	br	1068c <__alt_data_end+0xffff068c>
   108bc:	1800411e 	bne	r3,zero,109c4 <__addsf3+0x394>
   108c0:	80c00044 	addi	r3,r16,1
   108c4:	19c03fcc 	andi	r7,r3,255
   108c8:	01800044 	movi	r6,1
   108cc:	31c0260e 	bge	r6,r7,10968 <__addsf3+0x338>
   108d0:	01803fc4 	movi	r6,255
   108d4:	19802126 	beq	r3,r6,1095c <__addsf3+0x32c>
   108d8:	2149883a 	add	r4,r4,r5
   108dc:	2008d07a 	srli	r4,r4,1
   108e0:	1821883a 	mov	r16,r3
   108e4:	003f6906 	br	1068c <__alt_data_end+0xffff068c>
   108e8:	01400044 	movi	r5,1
   108ec:	003f8f06 	br	1072c <__alt_data_end+0xffff072c>
   108f0:	8000151e 	bne	r16,zero,10948 <__addsf3+0x318>
   108f4:	20002f26 	beq	r4,zero,109b4 <__addsf3+0x384>
   108f8:	0084303a 	nor	r2,zero,r2
   108fc:	10000a26 	beq	r2,zero,10928 <__addsf3+0x2f8>
   10900:	00c03fc4 	movi	r3,255
   10904:	30c02b26 	beq	r6,r3,109b4 <__addsf3+0x384>
   10908:	00c006c4 	movi	r3,27
   1090c:	18806d16 	blt	r3,r2,10ac4 <__addsf3+0x494>
   10910:	00c00804 	movi	r3,32
   10914:	1887c83a 	sub	r3,r3,r2
   10918:	20c6983a 	sll	r3,r4,r3
   1091c:	2084d83a 	srl	r2,r4,r2
   10920:	1808c03a 	cmpne	r4,r3,zero
   10924:	1108b03a 	or	r4,r2,r4
   10928:	2909c83a 	sub	r4,r5,r4
   1092c:	3021883a 	mov	r16,r6
   10930:	3823883a 	mov	r17,r7
   10934:	003f7e06 	br	10730 <__alt_data_end+0xffff0730>
   10938:	903f821e 	bne	r18,zero,10744 <__alt_data_end+0xffff0744>
   1093c:	0005883a 	mov	r2,zero
   10940:	0021883a 	mov	r16,zero
   10944:	003fba06 	br	10830 <__alt_data_end+0xffff0830>
   10948:	00c03fc4 	movi	r3,255
   1094c:	30c01926 	beq	r6,r3,109b4 <__addsf3+0x384>
   10950:	0085c83a 	sub	r2,zero,r2
   10954:	21010034 	orhi	r4,r4,1024
   10958:	003feb06 	br	10908 <__alt_data_end+0xffff0908>
   1095c:	043fffc4 	movi	r16,-1
   10960:	0009883a 	mov	r4,zero
   10964:	003f5706 	br	106c4 <__alt_data_end+0xffff06c4>
   10968:	80004a1e 	bne	r16,zero,10a94 <__addsf3+0x464>
   1096c:	20005926 	beq	r4,zero,10ad4 <__addsf3+0x4a4>
   10970:	283f4626 	beq	r5,zero,1068c <__alt_data_end+0xffff068c>
   10974:	2149883a 	add	r4,r4,r5
   10978:	2081002c 	andhi	r2,r4,1024
   1097c:	103f8226 	beq	r2,zero,10788 <__alt_data_end+0xffff0788>
   10980:	00bf0034 	movhi	r2,64512
   10984:	10bfffc4 	addi	r2,r2,-1
   10988:	3021883a 	mov	r16,r6
   1098c:	2088703a 	and	r4,r4,r2
   10990:	003f3e06 	br	1068c <__alt_data_end+0xffff068c>
   10994:	8000121e 	bne	r16,zero,109e0 <__addsf3+0x3b0>
   10998:	2000261e 	bne	r4,zero,10a34 <__addsf3+0x404>
   1099c:	283fa226 	beq	r5,zero,10828 <__alt_data_end+0xffff0828>
   109a0:	2809883a 	mov	r4,r5
   109a4:	3823883a 	mov	r17,r7
   109a8:	003f3806 	br	1068c <__alt_data_end+0xffff068c>
   109ac:	01400044 	movi	r5,1
   109b0:	003f9006 	br	107f4 <__alt_data_end+0xffff07f4>
   109b4:	2809883a 	mov	r4,r5
   109b8:	3021883a 	mov	r16,r6
   109bc:	3823883a 	mov	r17,r7
   109c0:	003f3206 	br	1068c <__alt_data_end+0xffff068c>
   109c4:	80000c1e 	bne	r16,zero,109f8 <__addsf3+0x3c8>
   109c8:	20002f26 	beq	r4,zero,10a88 <__addsf3+0x458>
   109cc:	00c6303a 	nor	r3,zero,r3
   109d0:	18002b1e 	bne	r3,zero,10a80 <__addsf3+0x450>
   109d4:	2149883a 	add	r4,r4,r5
   109d8:	3021883a 	mov	r16,r6
   109dc:	003f8606 	br	107f8 <__alt_data_end+0xffff07f8>
   109e0:	20001b1e 	bne	r4,zero,10a50 <__addsf3+0x420>
   109e4:	28003926 	beq	r5,zero,10acc <__addsf3+0x49c>
   109e8:	2809883a 	mov	r4,r5
   109ec:	3823883a 	mov	r17,r7
   109f0:	04003fc4 	movi	r16,255
   109f4:	003f2506 	br	1068c <__alt_data_end+0xffff068c>
   109f8:	01c03fc4 	movi	r7,255
   109fc:	31c02226 	beq	r6,r7,10a88 <__addsf3+0x458>
   10a00:	00c7c83a 	sub	r3,zero,r3
   10a04:	21010034 	orhi	r4,r4,1024
   10a08:	01c006c4 	movi	r7,27
   10a0c:	38c03616 	blt	r7,r3,10ae8 <__addsf3+0x4b8>
   10a10:	01c00804 	movi	r7,32
   10a14:	38cfc83a 	sub	r7,r7,r3
   10a18:	21ce983a 	sll	r7,r4,r7
   10a1c:	20c6d83a 	srl	r3,r4,r3
   10a20:	3808c03a 	cmpne	r4,r7,zero
   10a24:	1906b03a 	or	r3,r3,r4
   10a28:	1949883a 	add	r4,r3,r5
   10a2c:	3021883a 	mov	r16,r6
   10a30:	003f7106 	br	107f8 <__alt_data_end+0xffff07f8>
   10a34:	283f1526 	beq	r5,zero,1068c <__alt_data_end+0xffff068c>
   10a38:	2145c83a 	sub	r2,r4,r5
   10a3c:	10c1002c 	andhi	r3,r2,1024
   10a40:	183f4f26 	beq	r3,zero,10780 <__alt_data_end+0xffff0780>
   10a44:	2909c83a 	sub	r4,r5,r4
   10a48:	3823883a 	mov	r17,r7
   10a4c:	003f0f06 	br	1068c <__alt_data_end+0xffff068c>
   10a50:	28001a26 	beq	r5,zero,10abc <__addsf3+0x48c>
   10a54:	2008d0fa 	srli	r4,r4,3
   10a58:	2080102c 	andhi	r2,r4,64
   10a5c:	10000526 	beq	r2,zero,10a74 <__addsf3+0x444>
   10a60:	280ad0fa 	srli	r5,r5,3
   10a64:	2880102c 	andhi	r2,r5,64
   10a68:	1000021e 	bne	r2,zero,10a74 <__addsf3+0x444>
   10a6c:	2809883a 	mov	r4,r5
   10a70:	3823883a 	mov	r17,r7
   10a74:	200890fa 	slli	r4,r4,3
   10a78:	04003fc4 	movi	r16,255
   10a7c:	003f0306 	br	1068c <__alt_data_end+0xffff068c>
   10a80:	01c03fc4 	movi	r7,255
   10a84:	31ffe01e 	bne	r6,r7,10a08 <__alt_data_end+0xffff0a08>
   10a88:	2809883a 	mov	r4,r5
   10a8c:	3021883a 	mov	r16,r6
   10a90:	003efe06 	br	1068c <__alt_data_end+0xffff068c>
   10a94:	20001126 	beq	r4,zero,10adc <__addsf3+0x4ac>
   10a98:	28000826 	beq	r5,zero,10abc <__addsf3+0x48c>
   10a9c:	2008d0fa 	srli	r4,r4,3
   10aa0:	2080102c 	andhi	r2,r4,64
   10aa4:	103ff326 	beq	r2,zero,10a74 <__alt_data_end+0xffff0a74>
   10aa8:	280ad0fa 	srli	r5,r5,3
   10aac:	2880102c 	andhi	r2,r5,64
   10ab0:	103ff01e 	bne	r2,zero,10a74 <__alt_data_end+0xffff0a74>
   10ab4:	2809883a 	mov	r4,r5
   10ab8:	003fee06 	br	10a74 <__alt_data_end+0xffff0a74>
   10abc:	04003fc4 	movi	r16,255
   10ac0:	003ef206 	br	1068c <__alt_data_end+0xffff068c>
   10ac4:	01000044 	movi	r4,1
   10ac8:	003f9706 	br	10928 <__alt_data_end+0xffff0928>
   10acc:	0005883a 	mov	r2,zero
   10ad0:	003f3406 	br	107a4 <__alt_data_end+0xffff07a4>
   10ad4:	2809883a 	mov	r4,r5
   10ad8:	003eec06 	br	1068c <__alt_data_end+0xffff068c>
   10adc:	2809883a 	mov	r4,r5
   10ae0:	04003fc4 	movi	r16,255
   10ae4:	003ee906 	br	1068c <__alt_data_end+0xffff068c>
   10ae8:	00c00044 	movi	r3,1
   10aec:	003fce06 	br	10a28 <__alt_data_end+0xffff0a28>
   10af0:	0005883a 	mov	r2,zero
   10af4:	003f4e06 	br	10830 <__alt_data_end+0xffff0830>

00010af8 <__mulsf3>:
   10af8:	defff504 	addi	sp,sp,-44
   10afc:	dc000115 	stw	r16,4(sp)
   10b00:	2020d5fa 	srli	r16,r4,23
   10b04:	dd400615 	stw	r21,24(sp)
   10b08:	202ad7fa 	srli	r21,r4,31
   10b0c:	dc800315 	stw	r18,12(sp)
   10b10:	04802034 	movhi	r18,128
   10b14:	df000915 	stw	fp,36(sp)
   10b18:	dd000515 	stw	r20,20(sp)
   10b1c:	94bfffc4 	addi	r18,r18,-1
   10b20:	dfc00a15 	stw	ra,40(sp)
   10b24:	ddc00815 	stw	r23,32(sp)
   10b28:	dd800715 	stw	r22,28(sp)
   10b2c:	dcc00415 	stw	r19,16(sp)
   10b30:	dc400215 	stw	r17,8(sp)
   10b34:	84003fcc 	andi	r16,r16,255
   10b38:	9124703a 	and	r18,r18,r4
   10b3c:	a829883a 	mov	r20,r21
   10b40:	af003fcc 	andi	fp,r21,255
   10b44:	80005426 	beq	r16,zero,10c98 <__mulsf3+0x1a0>
   10b48:	00803fc4 	movi	r2,255
   10b4c:	80802f26 	beq	r16,r2,10c0c <__mulsf3+0x114>
   10b50:	91002034 	orhi	r4,r18,128
   10b54:	202490fa 	slli	r18,r4,3
   10b58:	843fe044 	addi	r16,r16,-127
   10b5c:	0023883a 	mov	r17,zero
   10b60:	002f883a 	mov	r23,zero
   10b64:	2804d5fa 	srli	r2,r5,23
   10b68:	282cd7fa 	srli	r22,r5,31
   10b6c:	01002034 	movhi	r4,128
   10b70:	213fffc4 	addi	r4,r4,-1
   10b74:	10803fcc 	andi	r2,r2,255
   10b78:	2166703a 	and	r19,r4,r5
   10b7c:	b1803fcc 	andi	r6,r22,255
   10b80:	10004c26 	beq	r2,zero,10cb4 <__mulsf3+0x1bc>
   10b84:	00c03fc4 	movi	r3,255
   10b88:	10c04726 	beq	r2,r3,10ca8 <__mulsf3+0x1b0>
   10b8c:	99002034 	orhi	r4,r19,128
   10b90:	202690fa 	slli	r19,r4,3
   10b94:	10bfe044 	addi	r2,r2,-127
   10b98:	0007883a 	mov	r3,zero
   10b9c:	80a1883a 	add	r16,r16,r2
   10ba0:	010003c4 	movi	r4,15
   10ba4:	1c44b03a 	or	r2,r3,r17
   10ba8:	b56af03a 	xor	r21,r22,r21
   10bac:	81c00044 	addi	r7,r16,1
   10bb0:	20806b36 	bltu	r4,r2,10d60 <__mulsf3+0x268>
   10bb4:	100490ba 	slli	r2,r2,2
   10bb8:	01000074 	movhi	r4,1
   10bbc:	2102f304 	addi	r4,r4,3020
   10bc0:	1105883a 	add	r2,r2,r4
   10bc4:	10800017 	ldw	r2,0(r2)
   10bc8:	1000683a 	jmp	r2
   10bcc:	00010d60 	cmpeqi	zero,zero,1077
   10bd0:	00010c20 	cmpeqi	zero,zero,1072
   10bd4:	00010c20 	cmpeqi	zero,zero,1072
   10bd8:	00010c1c 	xori	zero,zero,1072
   10bdc:	00010d44 	movi	zero,1077
   10be0:	00010d44 	movi	zero,1077
   10be4:	00010d30 	cmpltui	zero,zero,1076
   10be8:	00010c1c 	xori	zero,zero,1072
   10bec:	00010d44 	movi	zero,1077
   10bf0:	00010d30 	cmpltui	zero,zero,1076
   10bf4:	00010d44 	movi	zero,1077
   10bf8:	00010c1c 	xori	zero,zero,1072
   10bfc:	00010d50 	cmplti	zero,zero,1077
   10c00:	00010d50 	cmplti	zero,zero,1077
   10c04:	00010d50 	cmplti	zero,zero,1077
   10c08:	00010e60 	cmpeqi	zero,zero,1081
   10c0c:	90003b1e 	bne	r18,zero,10cfc <__mulsf3+0x204>
   10c10:	04400204 	movi	r17,8
   10c14:	05c00084 	movi	r23,2
   10c18:	003fd206 	br	10b64 <__alt_data_end+0xffff0b64>
   10c1c:	302b883a 	mov	r21,r6
   10c20:	00800084 	movi	r2,2
   10c24:	18802626 	beq	r3,r2,10cc0 <__mulsf3+0x1c8>
   10c28:	008000c4 	movi	r2,3
   10c2c:	1880b826 	beq	r3,r2,10f10 <__mulsf3+0x418>
   10c30:	00800044 	movi	r2,1
   10c34:	1880af1e 	bne	r3,r2,10ef4 <__mulsf3+0x3fc>
   10c38:	a829883a 	mov	r20,r21
   10c3c:	0007883a 	mov	r3,zero
   10c40:	0009883a 	mov	r4,zero
   10c44:	18803fcc 	andi	r2,r3,255
   10c48:	100695fa 	slli	r3,r2,23
   10c4c:	a0803fcc 	andi	r2,r20,255
   10c50:	100a97fa 	slli	r5,r2,31
   10c54:	00802034 	movhi	r2,128
   10c58:	10bfffc4 	addi	r2,r2,-1
   10c5c:	2084703a 	and	r2,r4,r2
   10c60:	10c4b03a 	or	r2,r2,r3
   10c64:	1144b03a 	or	r2,r2,r5
   10c68:	dfc00a17 	ldw	ra,40(sp)
   10c6c:	df000917 	ldw	fp,36(sp)
   10c70:	ddc00817 	ldw	r23,32(sp)
   10c74:	dd800717 	ldw	r22,28(sp)
   10c78:	dd400617 	ldw	r21,24(sp)
   10c7c:	dd000517 	ldw	r20,20(sp)
   10c80:	dcc00417 	ldw	r19,16(sp)
   10c84:	dc800317 	ldw	r18,12(sp)
   10c88:	dc400217 	ldw	r17,8(sp)
   10c8c:	dc000117 	ldw	r16,4(sp)
   10c90:	dec00b04 	addi	sp,sp,44
   10c94:	f800283a 	ret
   10c98:	90000d1e 	bne	r18,zero,10cd0 <__mulsf3+0x1d8>
   10c9c:	04400104 	movi	r17,4
   10ca0:	05c00044 	movi	r23,1
   10ca4:	003faf06 	br	10b64 <__alt_data_end+0xffff0b64>
   10ca8:	9806c03a 	cmpne	r3,r19,zero
   10cac:	18c00084 	addi	r3,r3,2
   10cb0:	003fba06 	br	10b9c <__alt_data_end+0xffff0b9c>
   10cb4:	9800141e 	bne	r19,zero,10d08 <__mulsf3+0x210>
   10cb8:	00c00044 	movi	r3,1
   10cbc:	003fb706 	br	10b9c <__alt_data_end+0xffff0b9c>
   10cc0:	a829883a 	mov	r20,r21
   10cc4:	00ffffc4 	movi	r3,-1
   10cc8:	0009883a 	mov	r4,zero
   10ccc:	003fdd06 	br	10c44 <__alt_data_end+0xffff0c44>
   10cd0:	9009883a 	mov	r4,r18
   10cd4:	d9400015 	stw	r5,0(sp)
   10cd8:	00110bc0 	call	110bc <__clzsi2>
   10cdc:	10fffec4 	addi	r3,r2,-5
   10ce0:	10801d84 	addi	r2,r2,118
   10ce4:	90e4983a 	sll	r18,r18,r3
   10ce8:	00a1c83a 	sub	r16,zero,r2
   10cec:	0023883a 	mov	r17,zero
   10cf0:	002f883a 	mov	r23,zero
   10cf4:	d9400017 	ldw	r5,0(sp)
   10cf8:	003f9a06 	br	10b64 <__alt_data_end+0xffff0b64>
   10cfc:	04400304 	movi	r17,12
   10d00:	05c000c4 	movi	r23,3
   10d04:	003f9706 	br	10b64 <__alt_data_end+0xffff0b64>
   10d08:	9809883a 	mov	r4,r19
   10d0c:	d9800015 	stw	r6,0(sp)
   10d10:	00110bc0 	call	110bc <__clzsi2>
   10d14:	10fffec4 	addi	r3,r2,-5
   10d18:	10801d84 	addi	r2,r2,118
   10d1c:	98e6983a 	sll	r19,r19,r3
   10d20:	0085c83a 	sub	r2,zero,r2
   10d24:	0007883a 	mov	r3,zero
   10d28:	d9800017 	ldw	r6,0(sp)
   10d2c:	003f9b06 	br	10b9c <__alt_data_end+0xffff0b9c>
   10d30:	01002034 	movhi	r4,128
   10d34:	0029883a 	mov	r20,zero
   10d38:	213fffc4 	addi	r4,r4,-1
   10d3c:	00ffffc4 	movi	r3,-1
   10d40:	003fc006 	br	10c44 <__alt_data_end+0xffff0c44>
   10d44:	9027883a 	mov	r19,r18
   10d48:	b807883a 	mov	r3,r23
   10d4c:	003fb406 	br	10c20 <__alt_data_end+0xffff0c20>
   10d50:	9027883a 	mov	r19,r18
   10d54:	e02b883a 	mov	r21,fp
   10d58:	b807883a 	mov	r3,r23
   10d5c:	003fb006 	br	10c20 <__alt_data_end+0xffff0c20>
   10d60:	9028d43a 	srli	r20,r18,16
   10d64:	982cd43a 	srli	r22,r19,16
   10d68:	94bfffcc 	andi	r18,r18,65535
   10d6c:	9cffffcc 	andi	r19,r19,65535
   10d70:	980b883a 	mov	r5,r19
   10d74:	9009883a 	mov	r4,r18
   10d78:	d9c00015 	stw	r7,0(sp)
   10d7c:	00106080 	call	10608 <__mulsi3>
   10d80:	a00b883a 	mov	r5,r20
   10d84:	9809883a 	mov	r4,r19
   10d88:	1023883a 	mov	r17,r2
   10d8c:	00106080 	call	10608 <__mulsi3>
   10d90:	a009883a 	mov	r4,r20
   10d94:	b00b883a 	mov	r5,r22
   10d98:	1027883a 	mov	r19,r2
   10d9c:	00106080 	call	10608 <__mulsi3>
   10da0:	b00b883a 	mov	r5,r22
   10da4:	9009883a 	mov	r4,r18
   10da8:	1029883a 	mov	r20,r2
   10dac:	00106080 	call	10608 <__mulsi3>
   10db0:	8806d43a 	srli	r3,r17,16
   10db4:	14c5883a 	add	r2,r2,r19
   10db8:	d9c00017 	ldw	r7,0(sp)
   10dbc:	1885883a 	add	r2,r3,r2
   10dc0:	14c0022e 	bgeu	r2,r19,10dcc <__mulsf3+0x2d4>
   10dc4:	00c00074 	movhi	r3,1
   10dc8:	a0e9883a 	add	r20,r20,r3
   10dcc:	1026943a 	slli	r19,r2,16
   10dd0:	8c7fffcc 	andi	r17,r17,65535
   10dd4:	1004d43a 	srli	r2,r2,16
   10dd8:	9c63883a 	add	r17,r19,r17
   10ddc:	882691ba 	slli	r19,r17,6
   10de0:	1505883a 	add	r2,r2,r20
   10de4:	8822d6ba 	srli	r17,r17,26
   10de8:	100891ba 	slli	r4,r2,6
   10dec:	9826c03a 	cmpne	r19,r19,zero
   10df0:	9c62b03a 	or	r17,r19,r17
   10df4:	8926b03a 	or	r19,r17,r4
   10df8:	9882002c 	andhi	r2,r19,2048
   10dfc:	10000426 	beq	r2,zero,10e10 <__mulsf3+0x318>
   10e00:	9804d07a 	srli	r2,r19,1
   10e04:	9900004c 	andi	r4,r19,1
   10e08:	3821883a 	mov	r16,r7
   10e0c:	1126b03a 	or	r19,r2,r4
   10e10:	80c01fc4 	addi	r3,r16,127
   10e14:	00c0210e 	bge	zero,r3,10e9c <__mulsf3+0x3a4>
   10e18:	988001cc 	andi	r2,r19,7
   10e1c:	10000426 	beq	r2,zero,10e30 <__mulsf3+0x338>
   10e20:	988003cc 	andi	r2,r19,15
   10e24:	01000104 	movi	r4,4
   10e28:	11000126 	beq	r2,r4,10e30 <__mulsf3+0x338>
   10e2c:	9927883a 	add	r19,r19,r4
   10e30:	9882002c 	andhi	r2,r19,2048
   10e34:	10000426 	beq	r2,zero,10e48 <__mulsf3+0x350>
   10e38:	00be0034 	movhi	r2,63488
   10e3c:	10bfffc4 	addi	r2,r2,-1
   10e40:	80c02004 	addi	r3,r16,128
   10e44:	98a6703a 	and	r19,r19,r2
   10e48:	00803f84 	movi	r2,254
   10e4c:	10ff9c16 	blt	r2,r3,10cc0 <__alt_data_end+0xffff0cc0>
   10e50:	980891ba 	slli	r4,r19,6
   10e54:	a829883a 	mov	r20,r21
   10e58:	2008d27a 	srli	r4,r4,9
   10e5c:	003f7906 	br	10c44 <__alt_data_end+0xffff0c44>
   10e60:	9080102c 	andhi	r2,r18,64
   10e64:	10000826 	beq	r2,zero,10e88 <__mulsf3+0x390>
   10e68:	9880102c 	andhi	r2,r19,64
   10e6c:	1000061e 	bne	r2,zero,10e88 <__mulsf3+0x390>
   10e70:	00802034 	movhi	r2,128
   10e74:	99001034 	orhi	r4,r19,64
   10e78:	10bfffc4 	addi	r2,r2,-1
   10e7c:	b029883a 	mov	r20,r22
   10e80:	2088703a 	and	r4,r4,r2
   10e84:	003fad06 	br	10d3c <__alt_data_end+0xffff0d3c>
   10e88:	00802034 	movhi	r2,128
   10e8c:	91001034 	orhi	r4,r18,64
   10e90:	10bfffc4 	addi	r2,r2,-1
   10e94:	2088703a 	and	r4,r4,r2
   10e98:	003fa806 	br	10d3c <__alt_data_end+0xffff0d3c>
   10e9c:	00800044 	movi	r2,1
   10ea0:	10c7c83a 	sub	r3,r2,r3
   10ea4:	008006c4 	movi	r2,27
   10ea8:	10ff6316 	blt	r2,r3,10c38 <__alt_data_end+0xffff0c38>
   10eac:	00800804 	movi	r2,32
   10eb0:	10c5c83a 	sub	r2,r2,r3
   10eb4:	9884983a 	sll	r2,r19,r2
   10eb8:	98c6d83a 	srl	r3,r19,r3
   10ebc:	1004c03a 	cmpne	r2,r2,zero
   10ec0:	1884b03a 	or	r2,r3,r2
   10ec4:	10c001cc 	andi	r3,r2,7
   10ec8:	18000426 	beq	r3,zero,10edc <__mulsf3+0x3e4>
   10ecc:	10c003cc 	andi	r3,r2,15
   10ed0:	01000104 	movi	r4,4
   10ed4:	19000126 	beq	r3,r4,10edc <__mulsf3+0x3e4>
   10ed8:	1105883a 	add	r2,r2,r4
   10edc:	10c1002c 	andhi	r3,r2,1024
   10ee0:	18000626 	beq	r3,zero,10efc <__mulsf3+0x404>
   10ee4:	a829883a 	mov	r20,r21
   10ee8:	00c00044 	movi	r3,1
   10eec:	0009883a 	mov	r4,zero
   10ef0:	003f5406 	br	10c44 <__alt_data_end+0xffff0c44>
   10ef4:	3821883a 	mov	r16,r7
   10ef8:	003fc506 	br	10e10 <__alt_data_end+0xffff0e10>
   10efc:	100491ba 	slli	r2,r2,6
   10f00:	a829883a 	mov	r20,r21
   10f04:	0007883a 	mov	r3,zero
   10f08:	1008d27a 	srli	r4,r2,9
   10f0c:	003f4d06 	br	10c44 <__alt_data_end+0xffff0c44>
   10f10:	00802034 	movhi	r2,128
   10f14:	99001034 	orhi	r4,r19,64
   10f18:	10bfffc4 	addi	r2,r2,-1
   10f1c:	a829883a 	mov	r20,r21
   10f20:	2088703a 	and	r4,r4,r2
   10f24:	003f8506 	br	10d3c <__alt_data_end+0xffff0d3c>

00010f28 <__fixsfsi>:
   10f28:	200ad5fa 	srli	r5,r4,23
   10f2c:	00c02034 	movhi	r3,128
   10f30:	18ffffc4 	addi	r3,r3,-1
   10f34:	29403fcc 	andi	r5,r5,255
   10f38:	00801f84 	movi	r2,126
   10f3c:	1906703a 	and	r3,r3,r4
   10f40:	2008d7fa 	srli	r4,r4,31
   10f44:	11400e0e 	bge	r2,r5,10f80 <__fixsfsi+0x58>
   10f48:	00802744 	movi	r2,157
   10f4c:	11400816 	blt	r2,r5,10f70 <__fixsfsi+0x48>
   10f50:	00802544 	movi	r2,149
   10f54:	18c02034 	orhi	r3,r3,128
   10f58:	11400b0e 	bge	r2,r5,10f88 <__fixsfsi+0x60>
   10f5c:	28bfda84 	addi	r2,r5,-150
   10f60:	1884983a 	sll	r2,r3,r2
   10f64:	20000726 	beq	r4,zero,10f84 <__fixsfsi+0x5c>
   10f68:	0085c83a 	sub	r2,zero,r2
   10f6c:	f800283a 	ret
   10f70:	00a00034 	movhi	r2,32768
   10f74:	10bfffc4 	addi	r2,r2,-1
   10f78:	2085883a 	add	r2,r4,r2
   10f7c:	f800283a 	ret
   10f80:	0005883a 	mov	r2,zero
   10f84:	f800283a 	ret
   10f88:	00802584 	movi	r2,150
   10f8c:	1145c83a 	sub	r2,r2,r5
   10f90:	1884d83a 	srl	r2,r3,r2
   10f94:	003ff306 	br	10f64 <__alt_data_end+0xffff0f64>

00010f98 <__floatsisf>:
   10f98:	defffd04 	addi	sp,sp,-12
   10f9c:	dfc00215 	stw	ra,8(sp)
   10fa0:	dc400115 	stw	r17,4(sp)
   10fa4:	dc000015 	stw	r16,0(sp)
   10fa8:	20003526 	beq	r4,zero,11080 <__floatsisf+0xe8>
   10fac:	2021883a 	mov	r16,r4
   10fb0:	2022d7fa 	srli	r17,r4,31
   10fb4:	20003616 	blt	r4,zero,11090 <__floatsisf+0xf8>
   10fb8:	8009883a 	mov	r4,r16
   10fbc:	00110bc0 	call	110bc <__clzsi2>
   10fc0:	00c02784 	movi	r3,158
   10fc4:	1887c83a 	sub	r3,r3,r2
   10fc8:	01002584 	movi	r4,150
   10fcc:	20c01416 	blt	r4,r3,11020 <__floatsisf+0x88>
   10fd0:	20c9c83a 	sub	r4,r4,r3
   10fd4:	8120983a 	sll	r16,r16,r4
   10fd8:	00802034 	movhi	r2,128
   10fdc:	10bfffc4 	addi	r2,r2,-1
   10fe0:	8809883a 	mov	r4,r17
   10fe4:	80a0703a 	and	r16,r16,r2
   10fe8:	18803fcc 	andi	r2,r3,255
   10fec:	100695fa 	slli	r3,r2,23
   10ff0:	20803fcc 	andi	r2,r4,255
   10ff4:	100897fa 	slli	r4,r2,31
   10ff8:	00802034 	movhi	r2,128
   10ffc:	10bfffc4 	addi	r2,r2,-1
   11000:	8084703a 	and	r2,r16,r2
   11004:	10c4b03a 	or	r2,r2,r3
   11008:	1104b03a 	or	r2,r2,r4
   1100c:	dfc00217 	ldw	ra,8(sp)
   11010:	dc400117 	ldw	r17,4(sp)
   11014:	dc000017 	ldw	r16,0(sp)
   11018:	dec00304 	addi	sp,sp,12
   1101c:	f800283a 	ret
   11020:	01002644 	movi	r4,153
   11024:	20c01c16 	blt	r4,r3,11098 <__floatsisf+0x100>
   11028:	20c9c83a 	sub	r4,r4,r3
   1102c:	8120983a 	sll	r16,r16,r4
   11030:	013f0034 	movhi	r4,64512
   11034:	213fffc4 	addi	r4,r4,-1
   11038:	814001cc 	andi	r5,r16,7
   1103c:	8108703a 	and	r4,r16,r4
   11040:	28000426 	beq	r5,zero,11054 <__floatsisf+0xbc>
   11044:	840003cc 	andi	r16,r16,15
   11048:	01400104 	movi	r5,4
   1104c:	81400126 	beq	r16,r5,11054 <__floatsisf+0xbc>
   11050:	2149883a 	add	r4,r4,r5
   11054:	2141002c 	andhi	r5,r4,1024
   11058:	28000526 	beq	r5,zero,11070 <__floatsisf+0xd8>
   1105c:	00c027c4 	movi	r3,159
   11060:	1887c83a 	sub	r3,r3,r2
   11064:	00bf0034 	movhi	r2,64512
   11068:	10bfffc4 	addi	r2,r2,-1
   1106c:	2088703a 	and	r4,r4,r2
   11070:	202091ba 	slli	r16,r4,6
   11074:	8809883a 	mov	r4,r17
   11078:	8020d27a 	srli	r16,r16,9
   1107c:	003fda06 	br	10fe8 <__alt_data_end+0xffff0fe8>
   11080:	0009883a 	mov	r4,zero
   11084:	0007883a 	mov	r3,zero
   11088:	0021883a 	mov	r16,zero
   1108c:	003fd606 	br	10fe8 <__alt_data_end+0xffff0fe8>
   11090:	0121c83a 	sub	r16,zero,r4
   11094:	003fc806 	br	10fb8 <__alt_data_end+0xffff0fb8>
   11098:	01002e44 	movi	r4,185
   1109c:	20c9c83a 	sub	r4,r4,r3
   110a0:	01400144 	movi	r5,5
   110a4:	8108983a 	sll	r4,r16,r4
   110a8:	288bc83a 	sub	r5,r5,r2
   110ac:	8160d83a 	srl	r16,r16,r5
   110b0:	2008c03a 	cmpne	r4,r4,zero
   110b4:	8120b03a 	or	r16,r16,r4
   110b8:	003fdd06 	br	11030 <__alt_data_end+0xffff1030>

000110bc <__clzsi2>:
   110bc:	00bfffd4 	movui	r2,65535
   110c0:	11000536 	bltu	r2,r4,110d8 <__clzsi2+0x1c>
   110c4:	00803fc4 	movi	r2,255
   110c8:	11000f36 	bltu	r2,r4,11108 <__clzsi2+0x4c>
   110cc:	00800804 	movi	r2,32
   110d0:	0007883a 	mov	r3,zero
   110d4:	00000506 	br	110ec <__clzsi2+0x30>
   110d8:	00804034 	movhi	r2,256
   110dc:	10bfffc4 	addi	r2,r2,-1
   110e0:	11000c2e 	bgeu	r2,r4,11114 <__clzsi2+0x58>
   110e4:	00800204 	movi	r2,8
   110e8:	00c00604 	movi	r3,24
   110ec:	20c8d83a 	srl	r4,r4,r3
   110f0:	00c00074 	movhi	r3,1
   110f4:	18c596c4 	addi	r3,r3,5723
   110f8:	1909883a 	add	r4,r3,r4
   110fc:	20c00003 	ldbu	r3,0(r4)
   11100:	10c5c83a 	sub	r2,r2,r3
   11104:	f800283a 	ret
   11108:	00800604 	movi	r2,24
   1110c:	00c00204 	movi	r3,8
   11110:	003ff606 	br	110ec <__alt_data_end+0xffff10ec>
   11114:	00800404 	movi	r2,16
   11118:	1007883a 	mov	r3,r2
   1111c:	003ff306 	br	110ec <__alt_data_end+0xffff10ec>

00011120 <memcpy>:
   11120:	2005883a 	mov	r2,r4
   11124:	2007883a 	mov	r3,r4
   11128:	218d883a 	add	r6,r4,r6
   1112c:	19800526 	beq	r3,r6,11144 <memcpy+0x24>
   11130:	29000003 	ldbu	r4,0(r5)
   11134:	18c00044 	addi	r3,r3,1
   11138:	29400044 	addi	r5,r5,1
   1113c:	193fffc5 	stb	r4,-1(r3)
   11140:	003ffa06 	br	1112c <__alt_data_end+0xffff112c>
   11144:	f800283a 	ret

00011148 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
   11148:	008007c4 	movi	r2,31
   1114c:	11002136 	bltu	r2,r4,111d4 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11150:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11154:	00ffff84 	movi	r3,-2
   11158:	38c4703a 	and	r2,r7,r3
   1115c:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
   11160:	200490fa 	slli	r2,r4,3
   11164:	02000074 	movhi	r8,1
   11168:	42063b04 	addi	r8,r8,6380
   1116c:	4085883a 	add	r2,r8,r2
   11170:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
   11174:	11400115 	stw	r5,4(r2)
   11178:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1117c:	30000726 	beq	r6,zero,1119c <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11180:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11184:	28c6703a 	and	r3,r5,r3
   11188:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   1118c:	d0e03517 	ldw	r3,-32556(gp)
   11190:	1104983a 	sll	r2,r2,r4
   11194:	10c4b03a 	or	r2,r2,r3
   11198:	00000706 	br	111b8 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1119c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   111a0:	28c6703a 	and	r3,r5,r3
   111a4:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   111a8:	1104983a 	sll	r2,r2,r4
   111ac:	d0e03517 	ldw	r3,-32556(gp)
   111b0:	0084303a 	nor	r2,zero,r2
   111b4:	10c4703a 	and	r2,r2,r3
   111b8:	d0a03515 	stw	r2,-32556(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   111bc:	d0a03517 	ldw	r2,-32556(gp)
   111c0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   111c4:	2801703a 	wrctl	status,r5
   111c8:	3801703a 	wrctl	status,r7
   111cc:	0005883a 	mov	r2,zero
   111d0:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
   111d4:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
   111d8:	f800283a 	ret

000111dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   111dc:	deffff04 	addi	sp,sp,-4
   111e0:	01000074 	movhi	r4,1
   111e4:	01400074 	movhi	r5,1
   111e8:	dfc00015 	stw	ra,0(sp)
   111ec:	2105da04 	addi	r4,r4,5992
   111f0:	29460304 	addi	r5,r5,6156

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   111f4:	2140061e 	bne	r4,r5,11210 <alt_load+0x34>
   111f8:	01000074 	movhi	r4,1
   111fc:	01400074 	movhi	r5,1
   11200:	21000804 	addi	r4,r4,32
   11204:	29400804 	addi	r5,r5,32
   11208:	2140121e 	bne	r4,r5,11254 <alt_load+0x78>
   1120c:	00000b06 	br	1123c <alt_load+0x60>
   11210:	00c00074 	movhi	r3,1
   11214:	18c60304 	addi	r3,r3,6156
   11218:	1907c83a 	sub	r3,r3,r4
   1121c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11220:	10fff526 	beq	r2,r3,111f8 <__alt_data_end+0xffff11f8>
    {
      *to++ = *from++;
   11224:	114f883a 	add	r7,r2,r5
   11228:	39c00017 	ldw	r7,0(r7)
   1122c:	110d883a 	add	r6,r2,r4
   11230:	10800104 	addi	r2,r2,4
   11234:	31c00015 	stw	r7,0(r6)
   11238:	003ff906 	br	11220 <__alt_data_end+0xffff1220>
   1123c:	01000074 	movhi	r4,1
   11240:	01400074 	movhi	r5,1
   11244:	21058c04 	addi	r4,r4,5680
   11248:	29458c04 	addi	r5,r5,5680

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1124c:	2140101e 	bne	r4,r5,11290 <alt_load+0xb4>
   11250:	00000b06 	br	11280 <alt_load+0xa4>
   11254:	00c00074 	movhi	r3,1
   11258:	18c06004 	addi	r3,r3,384
   1125c:	1907c83a 	sub	r3,r3,r4
   11260:	0005883a 	mov	r2,zero
  {
    while( to != end )
   11264:	10fff526 	beq	r2,r3,1123c <__alt_data_end+0xffff123c>
    {
      *to++ = *from++;
   11268:	114f883a 	add	r7,r2,r5
   1126c:	39c00017 	ldw	r7,0(r7)
   11270:	110d883a 	add	r6,r2,r4
   11274:	10800104 	addi	r2,r2,4
   11278:	31c00015 	stw	r7,0(r6)
   1127c:	003ff906 	br	11264 <__alt_data_end+0xffff1264>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11280:	00114780 	call	11478 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   11284:	dfc00017 	ldw	ra,0(sp)
   11288:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   1128c:	00115641 	jmpi	11564 <alt_icache_flush_all>
   11290:	00c00074 	movhi	r3,1
   11294:	18c5da04 	addi	r3,r3,5992
   11298:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   1129c:	0005883a 	mov	r2,zero
  {
    while( to != end )
   112a0:	18bff726 	beq	r3,r2,11280 <__alt_data_end+0xffff1280>
    {
      *to++ = *from++;
   112a4:	114f883a 	add	r7,r2,r5
   112a8:	39c00017 	ldw	r7,0(r7)
   112ac:	110d883a 	add	r6,r2,r4
   112b0:	10800104 	addi	r2,r2,4
   112b4:	31c00015 	stw	r7,0(r6)
   112b8:	003ff906 	br	112a0 <__alt_data_end+0xffff12a0>

000112bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   112bc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   112c0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   112c4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   112c8:	00112e80 	call	112e8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   112cc:	00113080 	call	11308 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   112d0:	d1a03617 	ldw	r6,-32552(gp)
   112d4:	d1603717 	ldw	r5,-32548(gp)
   112d8:	d1203817 	ldw	r4,-32544(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   112dc:	dfc00017 	ldw	ra,0(sp)
   112e0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   112e4:	00103dc1 	jmpi	103dc <main>

000112e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   112e8:	deffff04 	addi	sp,sp,-4
   112ec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
   112f0:	00115680 	call	11568 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   112f4:	00800044 	movi	r2,1
   112f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   112fc:	dfc00017 	ldw	ra,0(sp)
   11300:	dec00104 	addi	sp,sp,4
   11304:	f800283a 	ret

00011308 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   11308:	01000074 	movhi	r4,1
   1130c:	d1600304 	addi	r5,gp,-32756
   11310:	2105da04 	addi	r4,r4,5992
   11314:	00114841 	jmpi	11484 <alt_dev_llist_insert>

00011318 <alt_up_accelerometer_spi_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
   11318:	d1600304 	addi	r5,gp,-32756
   1131c:	00114f01 	jmpi	114f0 <alt_find_dev>

00011320 <alt_up_accelerometer_spi_read_address_register>:
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
   11320:	20800a17 	ldw	r2,40(r4)
   11324:	10800023 	ldbuio	r2,0(r2)
   11328:	28800005 	stb	r2,0(r5)

	return 0;
}
   1132c:	0005883a 	mov	r2,zero
   11330:	f800283a 	ret

00011334 <alt_up_accelerometer_spi_read>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11334:	20800a17 	ldw	r2,40(r4)
   11338:	29400fcc 	andi	r5,r5,63
   1133c:	11400025 	stbio	r5,0(r2)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11340:	20800a17 	ldw	r2,40(r4)
   11344:	10800063 	ldbuio	r2,1(r2)
   11348:	30800005 	stb	r2,0(r6)

	return 0;
}
   1134c:	0005883a 	mov	r2,zero
   11350:	f800283a 	ret

00011354 <alt_up_accelerometer_spi_write>:
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11354:	20800a17 	ldw	r2,40(r4)
   11358:	29400fcc 	andi	r5,r5,63
   1135c:	11400025 	stbio	r5,0(r2)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
   11360:	20800a17 	ldw	r2,40(r4)
   11364:	11800065 	stbio	r6,1(r2)

	return 0;
}
   11368:	0005883a 	mov	r2,zero
   1136c:	f800283a 	ret

00011370 <alt_up_accelerometer_spi_read_x_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11370:	20800a17 	ldw	r2,40(r4)
   11374:	00c00c84 	movi	r3,50
   11378:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1137c:	20800a17 	ldw	r2,40(r4)
   11380:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11384:	00c00cc4 	movi	r3,51
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11388:	10803fcc 	andi	r2,r2,255
   1138c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11390:	20800a17 	ldw	r2,40(r4)
   11394:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11398:	20800a17 	ldw	r2,40(r4)
   1139c:	10800063 	ldbuio	r2,1(r2)
   113a0:	10803fcc 	andi	r2,r2,255
   113a4:	1006923a 	slli	r3,r2,8
   113a8:	28800017 	ldw	r2,0(r5)
   113ac:	1885883a 	add	r2,r3,r2

	if (*(x_axis) & 0x00008000)
   113b0:	10e0000c 	andi	r3,r2,32768
   113b4:	18000126 	beq	r3,zero,113bc <alt_up_accelerometer_spi_read_x_axis+0x4c>
	{
		*(x_axis) |= 0xFFFF0000;
   113b8:	10bffff4 	orhi	r2,r2,65535
   113bc:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   113c0:	0005883a 	mov	r2,zero
   113c4:	f800283a 	ret

000113c8 <alt_up_accelerometer_spi_read_y_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   113c8:	20800a17 	ldw	r2,40(r4)
   113cc:	00c00d04 	movi	r3,52
   113d0:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   113d4:	20800a17 	ldw	r2,40(r4)
   113d8:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   113dc:	00c00d44 	movi	r3,53
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   113e0:	10803fcc 	andi	r2,r2,255
   113e4:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   113e8:	20800a17 	ldw	r2,40(r4)
   113ec:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   113f0:	20800a17 	ldw	r2,40(r4)
   113f4:	10800063 	ldbuio	r2,1(r2)
   113f8:	10803fcc 	andi	r2,r2,255
   113fc:	1006923a 	slli	r3,r2,8
   11400:	28800017 	ldw	r2,0(r5)
   11404:	1885883a 	add	r2,r3,r2

	if (*(y_axis) & 0x00008000)
   11408:	10e0000c 	andi	r3,r2,32768
   1140c:	18000126 	beq	r3,zero,11414 <alt_up_accelerometer_spi_read_y_axis+0x4c>
	{
		*(y_axis) |= 0xFFFF0000;
   11410:	10bffff4 	orhi	r2,r2,65535
   11414:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11418:	0005883a 	mov	r2,zero
   1141c:	f800283a 	ret

00011420 <alt_up_accelerometer_spi_read_z_axis>:
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11420:	20800a17 	ldw	r2,40(r4)
   11424:	00c00d84 	movi	r3,54
   11428:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   1142c:	20800a17 	ldw	r2,40(r4)
   11430:	10800063 	ldbuio	r2,1(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11434:	00c00dc4 	movi	r3,55
{
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
   11438:	10803fcc 	andi	r2,r2,255
   1143c:	28800015 	stw	r2,0(r5)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
   11440:	20800a17 	ldw	r2,40(r4)
   11444:	10c00025 	stbio	r3,0(r2)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
   11448:	20800a17 	ldw	r2,40(r4)
   1144c:	10800063 	ldbuio	r2,1(r2)
   11450:	10803fcc 	andi	r2,r2,255
   11454:	1006923a 	slli	r3,r2,8
   11458:	28800017 	ldw	r2,0(r5)
   1145c:	1885883a 	add	r2,r3,r2

	if (*(z_axis) & 0x00008000)
   11460:	10e0000c 	andi	r3,r2,32768
   11464:	18000126 	beq	r3,zero,1146c <alt_up_accelerometer_spi_read_z_axis+0x4c>
	{
		*(z_axis) |= 0xFFFF0000;
   11468:	10bffff4 	orhi	r2,r2,65535
   1146c:	28800015 	stw	r2,0(r5)
	}

	return 0;
}
   11470:	0005883a 	mov	r2,zero
   11474:	f800283a 	ret

00011478 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11478:	f800283a 	ret

0001147c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   1147c:	3005883a 	mov	r2,r6
   11480:	f800283a 	ret

00011484 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11484:	20000226 	beq	r4,zero,11490 <alt_dev_llist_insert+0xc>
   11488:	20800217 	ldw	r2,8(r4)
   1148c:	1000101e 	bne	r2,zero,114d0 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   11490:	d0a00717 	ldw	r2,-32740(gp)
   11494:	10000926 	beq	r2,zero,114bc <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11498:	deffff04 	addi	sp,sp,-4
   1149c:	dfc00015 	stw	ra,0(sp)
   114a0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   114a4:	00c00584 	movi	r3,22
   114a8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   114ac:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   114b0:	dfc00017 	ldw	ra,0(sp)
   114b4:	dec00104 	addi	sp,sp,4
   114b8:	f800283a 	ret
   114bc:	d0a03a04 	addi	r2,gp,-32536
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   114c0:	00c00584 	movi	r3,22
   114c4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   114c8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   114cc:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   114d0:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   114d4:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
   114d8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
   114dc:	28800017 	ldw	r2,0(r5)
   114e0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
   114e4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   114e8:	0005883a 	mov	r2,zero
   114ec:	f800283a 	ret

000114f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   114f0:	defffb04 	addi	sp,sp,-20
   114f4:	dcc00315 	stw	r19,12(sp)
   114f8:	dc800215 	stw	r18,8(sp)
   114fc:	dc400115 	stw	r17,4(sp)
   11500:	dc000015 	stw	r16,0(sp)
   11504:	dfc00415 	stw	ra,16(sp)
   11508:	2027883a 	mov	r19,r4
   1150c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
   11510:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
   11514:	00116140 	call	11614 <strlen>
   11518:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1151c:	84400726 	beq	r16,r17,1153c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   11520:	81000217 	ldw	r4,8(r16)
   11524:	900d883a 	mov	r6,r18
   11528:	980b883a 	mov	r5,r19
   1152c:	00115e40 	call	115e4 <memcmp>
   11530:	10000426 	beq	r2,zero,11544 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   11534:	84000017 	ldw	r16,0(r16)
   11538:	003ff806 	br	1151c <__alt_data_end+0xffff151c>
  }
  
  /* No match found */
  
  return NULL;
   1153c:	0005883a 	mov	r2,zero
   11540:	00000106 	br	11548 <alt_find_dev+0x58>
   11544:	8005883a 	mov	r2,r16
}
   11548:	dfc00417 	ldw	ra,16(sp)
   1154c:	dcc00317 	ldw	r19,12(sp)
   11550:	dc800217 	ldw	r18,8(sp)
   11554:	dc400117 	ldw	r17,4(sp)
   11558:	dc000017 	ldw	r16,0(sp)
   1155c:	dec00504 	addi	sp,sp,20
   11560:	f800283a 	ret

00011564 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11564:	f800283a 	ret

00011568 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   11568:	000170fa 	wrctl	ienable,zero
   1156c:	f800283a 	ret

00011570 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   11570:	213ffe84 	addi	r4,r4,-6
   11574:	008003c4 	movi	r2,15
   11578:	11001636 	bltu	r2,r4,115d4 <alt_exception_cause_generated_bad_addr+0x64>
   1157c:	200890ba 	slli	r4,r4,2
   11580:	00800074 	movhi	r2,1
   11584:	10856504 	addi	r2,r2,5524
   11588:	2089883a 	add	r4,r4,r2
   1158c:	20800017 	ldw	r2,0(r4)
   11590:	1000683a 	jmp	r2
   11594:	000115dc 	xori	zero,zero,1111
   11598:	000115dc 	xori	zero,zero,1111
   1159c:	000115d4 	movui	zero,1111
   115a0:	000115d4 	movui	zero,1111
   115a4:	000115d4 	movui	zero,1111
   115a8:	000115dc 	xori	zero,zero,1111
   115ac:	000115d4 	movui	zero,1111
   115b0:	000115d4 	movui	zero,1111
   115b4:	000115dc 	xori	zero,zero,1111
   115b8:	000115dc 	xori	zero,zero,1111
   115bc:	000115d4 	movui	zero,1111
   115c0:	000115dc 	xori	zero,zero,1111
   115c4:	000115d4 	movui	zero,1111
   115c8:	000115d4 	movui	zero,1111
   115cc:	000115d4 	movui	zero,1111
   115d0:	000115dc 	xori	zero,zero,1111
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   115d4:	0005883a 	mov	r2,zero
   115d8:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   115dc:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   115e0:	f800283a 	ret

000115e4 <memcmp>:
   115e4:	218d883a 	add	r6,r4,r6
   115e8:	21800826 	beq	r4,r6,1160c <memcmp+0x28>
   115ec:	20800003 	ldbu	r2,0(r4)
   115f0:	28c00003 	ldbu	r3,0(r5)
   115f4:	10c00226 	beq	r2,r3,11600 <memcmp+0x1c>
   115f8:	10c5c83a 	sub	r2,r2,r3
   115fc:	f800283a 	ret
   11600:	21000044 	addi	r4,r4,1
   11604:	29400044 	addi	r5,r5,1
   11608:	003ff706 	br	115e8 <__alt_data_end+0xffff15e8>
   1160c:	0005883a 	mov	r2,zero
   11610:	f800283a 	ret

00011614 <strlen>:
   11614:	2005883a 	mov	r2,r4
   11618:	10c00007 	ldb	r3,0(r2)
   1161c:	18000226 	beq	r3,zero,11628 <strlen+0x14>
   11620:	10800044 	addi	r2,r2,1
   11624:	003ffc06 	br	11618 <__alt_data_end+0xffff1618>
   11628:	1105c83a 	sub	r2,r2,r4
   1162c:	f800283a 	ret
